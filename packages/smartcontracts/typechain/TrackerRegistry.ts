/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace TrackerRegistry {
  export type NodeStruct = {
    nodeAddress: string;
    metadata: string;
    lastSeen: BigNumberish;
  };

  export type NodeStructOutput = [string, string, BigNumber] & {
    nodeAddress: string;
    metadata: string;
    lastSeen: BigNumber;
  };
}

export interface TrackerRegistryInterface extends utils.Interface {
  contractName: "TrackerRegistry";
  functions: {
    "createOrUpdateNode(address,string)": FunctionFragment;
    "createOrUpdateNodeSelf(string)": FunctionFragment;
    "getNode(address)": FunctionFragment;
    "getNodeByNumber(uint256)": FunctionFragment;
    "getNodes()": FunctionFragment;
    "headNode()": FunctionFragment;
    "kickOut(address)": FunctionFragment;
    "nodeCount()": FunctionFragment;
    "nodes(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeNode(address)": FunctionFragment;
    "removeNodeSelf()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requiresWhitelist()": FunctionFragment;
    "setRequiresWhitelist(bool)": FunctionFragment;
    "tailNode()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelistApproveNode(address)": FunctionFragment;
    "whitelistRejectNode(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createOrUpdateNode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrUpdateNodeSelf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getNode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getNodeByNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNodes", values?: undefined): string;
  encodeFunctionData(functionFragment: "headNode", values?: undefined): string;
  encodeFunctionData(functionFragment: "kickOut", values: [string]): string;
  encodeFunctionData(functionFragment: "nodeCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "nodes", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeNode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeNodeSelf",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiresWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiresWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "tailNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "whitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "whitelistApproveNode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRejectNode",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createOrUpdateNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrUpdateNodeSelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNodeByNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "headNode", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kickOut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nodeCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nodes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeNodeSelf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiresWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiresWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tailNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whitelist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelistApproveNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRejectNode",
    data: BytesLike
  ): Result;

  events: {
    "NodeRemoved(address)": EventFragment;
    "NodeUpdated(address,string,uint256,uint256)": EventFragment;
    "NodeWhitelistApproved(address)": EventFragment;
    "NodeWhitelistRejected(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RequiresWhitelistChanged(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NodeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeWhitelistApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NodeWhitelistRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequiresWhitelistChanged"): EventFragment;
}

export type NodeRemovedEvent = TypedEvent<[string], { nodeAddress: string }>;

export type NodeRemovedEventFilter = TypedEventFilter<NodeRemovedEvent>;

export type NodeUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    nodeAddress: string;
    metadata: string;
    isNew: BigNumber;
    lastSeen: BigNumber;
  }
>;

export type NodeUpdatedEventFilter = TypedEventFilter<NodeUpdatedEvent>;

export type NodeWhitelistApprovedEvent = TypedEvent<
  [string],
  { nodeAddress: string }
>;

export type NodeWhitelistApprovedEventFilter =
  TypedEventFilter<NodeWhitelistApprovedEvent>;

export type NodeWhitelistRejectedEvent = TypedEvent<
  [string],
  { nodeAddress: string }
>;

export type NodeWhitelistRejectedEventFilter =
  TypedEventFilter<NodeWhitelistRejectedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RequiresWhitelistChangedEvent = TypedEvent<
  [boolean],
  { value: boolean }
>;

export type RequiresWhitelistChangedEventFilter =
  TypedEventFilter<RequiresWhitelistChangedEvent>;

export interface TrackerRegistry extends BaseContract {
  contractName: "TrackerRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TrackerRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createOrUpdateNode(
      node: string,
      metadata_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrUpdateNodeSelf(
      metadata_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<[TrackerRegistry.NodeStructOutput]>;

    getNodeByNumber(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[TrackerRegistry.NodeStructOutput]>;

    getNodes(
      overrides?: CallOverrides
    ): Promise<[TrackerRegistry.NodeStructOutput[]]>;

    headNode(overrides?: CallOverrides): Promise<[string]>;

    kickOut(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nodeCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [TrackerRegistry.NodeStructOutput, string, string] & {
        node: TrackerRegistry.NodeStructOutput;
        next: string;
        prev: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeNodeSelf(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requiresWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    setRequiresWhitelist(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tailNode(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    whitelistApproveNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistRejectNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createOrUpdateNode(
    node: string,
    metadata_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrUpdateNodeSelf(
    metadata_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNode(
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<TrackerRegistry.NodeStructOutput>;

  getNodeByNumber(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TrackerRegistry.NodeStructOutput>;

  getNodes(
    overrides?: CallOverrides
  ): Promise<TrackerRegistry.NodeStructOutput[]>;

  headNode(overrides?: CallOverrides): Promise<string>;

  kickOut(
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nodeCount(overrides?: CallOverrides): Promise<BigNumber>;

  nodes(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [TrackerRegistry.NodeStructOutput, string, string] & {
      node: TrackerRegistry.NodeStructOutput;
      next: string;
      prev: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  removeNode(
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeNodeSelf(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requiresWhitelist(overrides?: CallOverrides): Promise<boolean>;

  setRequiresWhitelist(
    value: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tailNode(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelist(arg0: string, overrides?: CallOverrides): Promise<number>;

  whitelistApproveNode(
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistRejectNode(
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createOrUpdateNode(
      node: string,
      metadata_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrUpdateNodeSelf(
      metadata_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<TrackerRegistry.NodeStructOutput>;

    getNodeByNumber(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TrackerRegistry.NodeStructOutput>;

    getNodes(
      overrides?: CallOverrides
    ): Promise<TrackerRegistry.NodeStructOutput[]>;

    headNode(overrides?: CallOverrides): Promise<string>;

    kickOut(nodeAddress: string, overrides?: CallOverrides): Promise<void>;

    nodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [TrackerRegistry.NodeStructOutput, string, string] & {
        node: TrackerRegistry.NodeStructOutput;
        next: string;
        prev: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    removeNode(nodeAddress: string, overrides?: CallOverrides): Promise<void>;

    removeNodeSelf(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requiresWhitelist(overrides?: CallOverrides): Promise<boolean>;

    setRequiresWhitelist(
      value: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tailNode(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<number>;

    whitelistApproveNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistRejectNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NodeRemoved(address)"(nodeAddress?: string | null): NodeRemovedEventFilter;
    NodeRemoved(nodeAddress?: string | null): NodeRemovedEventFilter;

    "NodeUpdated(address,string,uint256,uint256)"(
      nodeAddress?: string | null,
      metadata?: null,
      isNew?: BigNumberish | null,
      lastSeen?: null
    ): NodeUpdatedEventFilter;
    NodeUpdated(
      nodeAddress?: string | null,
      metadata?: null,
      isNew?: BigNumberish | null,
      lastSeen?: null
    ): NodeUpdatedEventFilter;

    "NodeWhitelistApproved(address)"(
      nodeAddress?: string | null
    ): NodeWhitelistApprovedEventFilter;
    NodeWhitelistApproved(
      nodeAddress?: string | null
    ): NodeWhitelistApprovedEventFilter;

    "NodeWhitelistRejected(address)"(
      nodeAddress?: string | null
    ): NodeWhitelistRejectedEventFilter;
    NodeWhitelistRejected(
      nodeAddress?: string | null
    ): NodeWhitelistRejectedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RequiresWhitelistChanged(bool)"(
      value?: boolean | null
    ): RequiresWhitelistChangedEventFilter;
    RequiresWhitelistChanged(
      value?: boolean | null
    ): RequiresWhitelistChangedEventFilter;
  };

  estimateGas: {
    createOrUpdateNode(
      node: string,
      metadata_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrUpdateNodeSelf(
      metadata_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNode(nodeAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    getNodeByNumber(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNodes(overrides?: CallOverrides): Promise<BigNumber>;

    headNode(overrides?: CallOverrides): Promise<BigNumber>;

    kickOut(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nodeCount(overrides?: CallOverrides): Promise<BigNumber>;

    nodes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeNodeSelf(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requiresWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    setRequiresWhitelist(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tailNode(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelist(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    whitelistApproveNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistRejectNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createOrUpdateNode(
      node: string,
      metadata_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrUpdateNodeSelf(
      metadata_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNode(
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodeByNumber(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNodes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    headNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kickOut(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nodeCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nodes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeNodeSelf(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requiresWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRequiresWhitelist(
      value: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tailNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistApproveNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistRejectNode(
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
