/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace StreamRegistryV2 {
  export type PermissionStruct = {
    canEdit: boolean;
    canDelete: boolean;
    publishExpiration: BigNumberish;
    subscribeExpiration: BigNumberish;
    canGrant: boolean;
  };

  export type PermissionStructOutput = [
    boolean,
    boolean,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    canEdit: boolean;
    canDelete: boolean;
    publishExpiration: BigNumber;
    subscribeExpiration: BigNumber;
    canGrant: boolean;
  };
}

export interface StreamRegistryV2Interface extends utils.Interface {
  contractName: "StreamRegistryV2";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ENScreateStreamCallback(address,string,string,string)": FunctionFragment;
    "MAX_INT()": FunctionFragment;
    "TRUSTED_ROLE()": FunctionFragment;
    "addressToString(address)": FunctionFragment;
    "createStream(string,string)": FunctionFragment;
    "createStreamWithENS(string,string,string)": FunctionFragment;
    "deleteStream(string)": FunctionFragment;
    "exists(string)": FunctionFragment;
    "getAddressKey(string,address)": FunctionFragment;
    "getDirectPermissionsForUser(string,address)": FunctionFragment;
    "getPermissionsForUser(string,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStreamMetadata(string)": FunctionFragment;
    "getTrustedRole()": FunctionFragment;
    "grantPermission(string,address,uint8)": FunctionFragment;
    "grantPublicPermission(string,uint8)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasDirectPermission(string,address,uint8)": FunctionFragment;
    "hasPermission(string,address,uint8)": FunctionFragment;
    "hasPublicPermission(string,uint8)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeAllPermissionsForUser(string,address)": FunctionFragment;
    "revokePermission(string,address,uint8)": FunctionFragment;
    "revokePublicPermission(string,uint8)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setEnsCache(address)": FunctionFragment;
    "setExpirationTime(string,address,uint8,uint256)": FunctionFragment;
    "setPermissions(string,address[],(bool,bool,uint256,uint256,bool)[])": FunctionFragment;
    "setPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)": FunctionFragment;
    "setPublicPermission(string,uint256,uint256)": FunctionFragment;
    "streamIdToMetadata(string)": FunctionFragment;
    "streamIdToPermissions(string,bytes32)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferAllPermissionsToUser(string,address)": FunctionFragment;
    "transferPermissionToUser(string,address,uint8)": FunctionFragment;
    "trustedSetPermissionsForUser(string,address,bool,bool,uint256,uint256,bool)": FunctionFragment;
    "trustedSetStreamMetadata(string,string)": FunctionFragment;
    "trustedSetStreamWithPermission(string,string,address,bool,bool,uint256,uint256,bool)": FunctionFragment;
    "trustedSetStreams(string[],address[],string[],(bool,bool,uint256,uint256,bool)[])": FunctionFragment;
    "updateStreamMetadata(string,string)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ENScreateStreamCallback",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "MAX_INT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TRUSTED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressToString",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createStream",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createStreamWithENS",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStream",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "exists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getAddressKey",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectPermissionsForUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionsForUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStreamMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermission",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPublicPermission",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasDirectPermission",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPublicPermission",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAllPermissionsForUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokePublicPermission",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setEnsCache", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setExpirationTime",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissions",
    values: [string, string[], StreamRegistryV2.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionsForUser",
    values: [
      string,
      string,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPublicPermission",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "streamIdToMetadata",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "streamIdToPermissions",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAllPermissionsToUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPermissionToUser",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetPermissionsForUser",
    values: [
      string,
      string,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetStreamMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetStreamWithPermission",
    values: [
      string,
      string,
      string,
      boolean,
      boolean,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSetStreams",
    values: [string[], string[], string[], StreamRegistryV2.PermissionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStreamMetadata",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ENScreateStreamCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_INT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TRUSTED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToString",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStreamWithENS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStreamMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPublicPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasDirectPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPublicPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAllPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePublicPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setEnsCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPublicPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamIdToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamIdToPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAllPermissionsToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPermissionToUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetPermissionsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetStreamMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetStreamWithPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSetStreams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStreamMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "PermissionUpdated(string,address,bool,bool,uint256,uint256,bool)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "StreamCreated(string,string)": EventFragment;
    "StreamDeleted(string)": EventFragment;
    "StreamUpdated(string,string)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PermissionUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StreamUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type PermissionUpdatedEvent = TypedEvent<
  [string, string, boolean, boolean, BigNumber, BigNumber, boolean],
  {
    streamId: string;
    user: string;
    canEdit: boolean;
    canDelete: boolean;
    publishExpiration: BigNumber;
    subscribeExpiration: BigNumber;
    canGrant: boolean;
  }
>;

export type PermissionUpdatedEventFilter =
  TypedEventFilter<PermissionUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type StreamCreatedEvent = TypedEvent<
  [string, string],
  { id: string; metadata: string }
>;

export type StreamCreatedEventFilter = TypedEventFilter<StreamCreatedEvent>;

export type StreamDeletedEvent = TypedEvent<[string], { id: string }>;

export type StreamDeletedEventFilter = TypedEventFilter<StreamDeletedEvent>;

export type StreamUpdatedEvent = TypedEvent<
  [string, string],
  { id: string; metadata: string }
>;

export type StreamUpdatedEventFilter = TypedEventFilter<StreamUpdatedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface StreamRegistryV2 extends BaseContract {
  contractName: "StreamRegistryV2";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamRegistryV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ENScreateStreamCallback(
      ownerAddress: string,
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    MAX_INT(overrides?: CallOverrides): Promise<[BigNumber]>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createStream(
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStreamWithENS(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteStream(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exists(streamId: string, overrides?: CallOverrides): Promise<[boolean]>;

    getAddressKey(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDirectPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [StreamRegistryV2.PermissionStructOutput] & {
        permission: StreamRegistryV2.PermissionStructOutput;
      }
    >;

    getPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [StreamRegistryV2.PermissionStructOutput] & {
        permission: StreamRegistryV2.PermissionStructOutput;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getStreamMetadata(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<[string] & { des: string }>;

    getTrustedRole(overrides?: CallOverrides): Promise<[string]>;

    grantPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasDirectPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { userHasPermission: boolean }>;

    hasPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { userHasPermission: boolean }>;

    hasPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { userHasPermission: boolean }>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      ensCacheAddr: string,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeAllPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokePermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokePublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnsCache(
      ensCacheAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpirationTime(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      expirationTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissions(
      streamId: string,
      users: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPublicPermission(
      streamId: string,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    streamIdToMetadata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    streamIdToPermissions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, boolean] & {
        canEdit: boolean;
        canDelete: boolean;
        publishExpiration: BigNumber;
        subscribeExpiration: BigNumber;
        canGrant: boolean;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferAllPermissionsToUser(
      streamId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferPermissionToUser(
      streamId: string,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedSetPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedSetStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedSetStreamWithPermission(
      streamId: string,
      metadata: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trustedSetStreams(
      streamids: string[],
      users: string[],
      metadatas: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ENScreateStreamCallback(
    ownerAddress: string,
    ensName: string,
    streamIdPath: string,
    metadataJsonString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

  TRUSTED_ROLE(overrides?: CallOverrides): Promise<string>;

  addressToString(_address: string, overrides?: CallOverrides): Promise<string>;

  createStream(
    streamIdPath: string,
    metadataJsonString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createStreamWithENS(
    ensName: string,
    streamIdPath: string,
    metadataJsonString: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteStream(
    streamId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exists(streamId: string, overrides?: CallOverrides): Promise<boolean>;

  getAddressKey(
    streamId: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getDirectPermissionsForUser(
    streamId: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<StreamRegistryV2.PermissionStructOutput>;

  getPermissionsForUser(
    streamId: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<StreamRegistryV2.PermissionStructOutput>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getStreamMetadata(
    streamId: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTrustedRole(overrides?: CallOverrides): Promise<string>;

  grantPermission(
    streamId: string,
    user: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantPublicPermission(
    streamId: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasDirectPermission(
    streamId: string,
    user: string,
    permissionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPermission(
    streamId: string,
    user: string,
    permissionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasPublicPermission(
    streamId: string,
    permissionType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    ensCacheAddr: string,
    trustedForwarderAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeAllPermissionsForUser(
    streamId: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokePermission(
    streamId: string,
    user: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokePublicPermission(
    streamId: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnsCache(
    ensCacheAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpirationTime(
    streamId: string,
    user: string,
    permissionType: BigNumberish,
    expirationTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissions(
    streamId: string,
    users: string[],
    permissions: StreamRegistryV2.PermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissionsForUser(
    streamId: string,
    user: string,
    canEdit: boolean,
    deletePerm: boolean,
    publishExpiration: BigNumberish,
    subscribeExpiration: BigNumberish,
    canGrant: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPublicPermission(
    streamId: string,
    publishExpiration: BigNumberish,
    subscribeExpiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  streamIdToMetadata(arg0: string, overrides?: CallOverrides): Promise<string>;

  streamIdToPermissions(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber, boolean] & {
      canEdit: boolean;
      canDelete: boolean;
      publishExpiration: BigNumber;
      subscribeExpiration: BigNumber;
      canGrant: boolean;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferAllPermissionsToUser(
    streamId: string,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferPermissionToUser(
    streamId: string,
    recipient: string,
    permissionType: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedSetPermissionsForUser(
    streamId: string,
    user: string,
    canEdit: boolean,
    deletePerm: boolean,
    publishExpiration: BigNumberish,
    subscribeExpiration: BigNumberish,
    canGrant: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedSetStreamMetadata(
    streamId: string,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedSetStreamWithPermission(
    streamId: string,
    metadata: string,
    user: string,
    canEdit: boolean,
    deletePerm: boolean,
    publishExpiration: BigNumberish,
    subscribeExpiration: BigNumberish,
    canGrant: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trustedSetStreams(
    streamids: string[],
    users: string[],
    metadatas: string[],
    permissions: StreamRegistryV2.PermissionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStreamMetadata(
    streamId: string,
    metadata: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ENScreateStreamCallback(
      ownerAddress: string,
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<string>;

    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<string>;

    createStream(
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createStreamWithENS(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteStream(streamId: string, overrides?: CallOverrides): Promise<void>;

    exists(streamId: string, overrides?: CallOverrides): Promise<boolean>;

    getAddressKey(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getDirectPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<StreamRegistryV2.PermissionStructOutput>;

    getPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<StreamRegistryV2.PermissionStructOutput>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getStreamMetadata(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTrustedRole(overrides?: CallOverrides): Promise<string>;

    grantPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasDirectPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      ensCacheAddr: string,
      trustedForwarderAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAllPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokePublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setEnsCache(ensCacheAddr: string, overrides?: CallOverrides): Promise<void>;

    setExpirationTime(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      expirationTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissions(
      streamId: string,
      users: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPublicPermission(
      streamId: string,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    streamIdToMetadata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    streamIdToPermissions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber, boolean] & {
        canEdit: boolean;
        canDelete: boolean;
        publishExpiration: BigNumber;
        subscribeExpiration: BigNumber;
        canGrant: boolean;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferAllPermissionsToUser(
      streamId: string,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPermissionToUser(
      streamId: string,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSetPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSetStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSetStreamWithPermission(
      streamId: string,
      metadata: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedSetStreams(
      streamids: string[],
      users: string[],
      metadatas: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "PermissionUpdated(string,address,bool,bool,uint256,uint256,bool)"(
      streamId?: null,
      user?: null,
      canEdit?: null,
      canDelete?: null,
      publishExpiration?: null,
      subscribeExpiration?: null,
      canGrant?: null
    ): PermissionUpdatedEventFilter;
    PermissionUpdated(
      streamId?: null,
      user?: null,
      canEdit?: null,
      canDelete?: null,
      publishExpiration?: null,
      subscribeExpiration?: null,
      canGrant?: null
    ): PermissionUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "StreamCreated(string,string)"(
      id?: null,
      metadata?: null
    ): StreamCreatedEventFilter;
    StreamCreated(id?: null, metadata?: null): StreamCreatedEventFilter;

    "StreamDeleted(string)"(id?: null): StreamDeletedEventFilter;
    StreamDeleted(id?: null): StreamDeletedEventFilter;

    "StreamUpdated(string,string)"(
      id?: null,
      metadata?: null
    ): StreamUpdatedEventFilter;
    StreamUpdated(id?: null, metadata?: null): StreamUpdatedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ENScreateStreamCallback(
      ownerAddress: string,
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    MAX_INT(overrides?: CallOverrides): Promise<BigNumber>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStream(
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createStreamWithENS(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteStream(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exists(streamId: string, overrides?: CallOverrides): Promise<BigNumber>;

    getAddressKey(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDirectPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStreamMetadata(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTrustedRole(overrides?: CallOverrides): Promise<BigNumber>;

    grantPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasDirectPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      ensCacheAddr: string,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeAllPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokePermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokePublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnsCache(
      ensCacheAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpirationTime(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      expirationTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissions(
      streamId: string,
      users: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPublicPermission(
      streamId: string,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    streamIdToMetadata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    streamIdToPermissions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferAllPermissionsToUser(
      streamId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferPermissionToUser(
      streamId: string,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedSetPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedSetStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedSetStreamWithPermission(
      streamId: string,
      metadata: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trustedSetStreams(
      streamids: string[],
      users: string[],
      metadatas: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ENScreateStreamCallback(
      ownerAddress: string,
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    MAX_INT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TRUSTED_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressToString(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createStream(
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createStreamWithENS(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteStream(
      streamId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exists(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAddressKey(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDirectPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStreamMetadata(
      streamId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTrustedRole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasDirectPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      ensCacheAddr: string,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeAllPermissionsForUser(
      streamId: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokePermission(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokePublicPermission(
      streamId: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnsCache(
      ensCacheAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpirationTime(
      streamId: string,
      user: string,
      permissionType: BigNumberish,
      expirationTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissions(
      streamId: string,
      users: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPublicPermission(
      streamId: string,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    streamIdToMetadata(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    streamIdToPermissions(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferAllPermissionsToUser(
      streamId: string,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferPermissionToUser(
      streamId: string,
      recipient: string,
      permissionType: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedSetPermissionsForUser(
      streamId: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedSetStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedSetStreamWithPermission(
      streamId: string,
      metadata: string,
      user: string,
      canEdit: boolean,
      deletePerm: boolean,
      publishExpiration: BigNumberish,
      subscribeExpiration: BigNumberish,
      canGrant: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trustedSetStreams(
      streamids: string[],
      users: string[],
      metadatas: string[],
      permissions: StreamRegistryV2.PermissionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStreamMetadata(
      streamId: string,
      metadata: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
