/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ENSCacheV1Interface extends utils.Interface {
  contractName: "ENSCacheV1";
  functions: {
    "cancelRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "fulfillENSOwner(bytes32,bytes32)": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "jobId()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "owners(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestENSOwner(string)": FunctionFragment;
    "requestENSOwnerAndCreateStream(string,string,string,address)": FunctionFragment;
    "setChainlinkJobId(string)": FunctionFragment;
    "setChainlinkTokenAddress(address)": FunctionFragment;
    "setOracleAddress(address)": FunctionFragment;
    "setStreamRegistry(address)": FunctionFragment;
    "tempENSnames(bytes32)": FunctionFragment;
    "tempIdPaths(bytes32)": FunctionFragment;
    "tempMetadatas(bytes32)": FunctionFragment;
    "tempRequestorAddress(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillENSOwner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owners", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestENSOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestENSOwnerAndCreateStream",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkJobId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreamRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tempENSnames",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tempIdPaths",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tempMetadatas",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tempRequestorAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillENSOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestENSOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestENSOwnerAndCreateStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkJobId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStreamRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempENSnames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempIdPaths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempMetadatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempRequestorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ChainlinkCancelledEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkCancelledEventFilter =
  TypedEventFilter<ChainlinkCancelledEvent>;

export type ChainlinkFulfilledEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkFulfilledEventFilter =
  TypedEventFilter<ChainlinkFulfilledEvent>;

export type ChainlinkRequestedEvent = TypedEvent<[string], { id: string }>;

export type ChainlinkRequestedEventFilter =
  TypedEventFilter<ChainlinkRequestedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ENSCacheV1 extends BaseContract {
  contractName: "ENSCacheV1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ENSCacheV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    jobId(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    owners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestENSOwner(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tempENSnames(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    tempMetadatas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillENSOwner(
    requestId: BytesLike,
    owneraddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  jobId(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  owners(arg0: string, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestENSOwner(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestENSOwnerAndCreateStream(
    ensName: string,
    streamIdPath: string,
    metadataJsonString: string,
    requestorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkJobId(
    chainlinkJobId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkTokenAddress(
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleAddress(
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStreamRegistry(
    streamRegistryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tempENSnames(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  tempMetadatas(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  tempRequestorAddress(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    jobId(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    owners(arg0: string, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestENSOwner(ensName: string, overrides?: CallOverrides): Promise<void>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tempENSnames(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    tempMetadatas(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ChainlinkCancelled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkCancelledEventFilter;
    ChainlinkCancelled(id?: BytesLike | null): ChainlinkCancelledEventFilter;

    "ChainlinkFulfilled(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkFulfilledEventFilter;
    ChainlinkFulfilled(id?: BytesLike | null): ChainlinkFulfilledEventFilter;

    "ChainlinkRequested(bytes32)"(
      id?: BytesLike | null
    ): ChainlinkRequestedEventFilter;
    ChainlinkRequested(id?: BytesLike | null): ChainlinkRequestedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestENSOwner(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tempENSnames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    tempMetadatas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    jobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestENSOwner(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tempENSnames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tempIdPaths(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tempMetadatas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
