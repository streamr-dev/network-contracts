/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StreamStorageRegistryInterface extends utils.Interface {
  contractName: "StreamStorageRegistry";
  functions: {
    "addAndRemoveStorageNodes(string,address[],address[])": FunctionFragment;
    "addStorageNode(string,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isStorageNodeOf(string,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "nodeRegistry()": FunctionFragment;
    "pairs(string,address)": FunctionFragment;
    "removeStorageNode(string,address)": FunctionFragment;
    "streamRegistry()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAndRemoveStorageNodes",
    values: [string, string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addStorageNode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isStorageNodeOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nodeRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pairs",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStorageNode",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "streamRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAndRemoveStorageNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStorageNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStorageNodeOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodeRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStorageNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "Added(string,address)": EventFragment;
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Removed(string,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Added"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Removed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AddedEvent = TypedEvent<
  [string, string],
  { streamId: string; nodeAddress: string }
>;

export type AddedEventFilter = TypedEventFilter<AddedEvent>;

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type RemovedEvent = TypedEvent<
  [string, string],
  { streamId: string; nodeAddress: string }
>;

export type RemovedEventFilter = TypedEventFilter<RemovedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface StreamStorageRegistry extends BaseContract {
  contractName: "StreamStorageRegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamStorageRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAndRemoveStorageNodes(
      streamId: string,
      addNodes: string[],
      removeNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      streamRegistryAddress: string,
      nodeRegistryAddress: string,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isStorageNodeOf(
      streamId: string,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nodeRegistry(overrides?: CallOverrides): Promise<[string]>;

    pairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { dateCreated: BigNumber }>;

    removeStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    streamRegistry(overrides?: CallOverrides): Promise<[string]>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAndRemoveStorageNodes(
    streamId: string,
    addNodes: string[],
    removeNodes: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addStorageNode(
    streamId: string,
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    streamRegistryAddress: string,
    nodeRegistryAddress: string,
    trustedForwarderAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isStorageNodeOf(
    streamId: string,
    nodeAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nodeRegistry(overrides?: CallOverrides): Promise<string>;

  pairs(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeStorageNode(
    streamId: string,
    nodeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  streamRegistry(overrides?: CallOverrides): Promise<string>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAndRemoveStorageNodes(
      streamId: string,
      addNodes: string[],
      removeNodes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      streamRegistryAddress: string,
      nodeRegistryAddress: string,
      trustedForwarderAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isStorageNodeOf(
      streamId: string,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nodeRegistry(overrides?: CallOverrides): Promise<string>;

    pairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    streamRegistry(overrides?: CallOverrides): Promise<string>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Added(string,address)"(
      streamId?: null,
      nodeAddress?: string | null
    ): AddedEventFilter;
    Added(streamId?: null, nodeAddress?: string | null): AddedEventFilter;

    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "Removed(string,address)"(
      streamId?: null,
      nodeAddress?: string | null
    ): RemovedEventFilter;
    Removed(streamId?: null, nodeAddress?: string | null): RemovedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    addAndRemoveStorageNodes(
      streamId: string,
      addNodes: string[],
      removeNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      streamRegistryAddress: string,
      nodeRegistryAddress: string,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isStorageNodeOf(
      streamId: string,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nodeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    streamRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAndRemoveStorageNodes(
      streamId: string,
      addNodes: string[],
      removeNodes: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      streamRegistryAddress: string,
      nodeRegistryAddress: string,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isStorageNodeOf(
      streamId: string,
      nodeAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nodeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeStorageNode(
      streamId: string,
      nodeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    streamRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
