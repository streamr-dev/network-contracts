/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MinimumStakeJoinPolicyInterface extends utils.Interface {
  contractName: "MinimumStakeJoinPolicy";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "addJoinPolicy(address,uint256)": FunctionFragment;
    "allocationWeiPerSecond()": FunctionFragment;
    "checkAbleToJoin(address,uint256)": FunctionFragment;
    "cueAtJoinWei(address)": FunctionFragment;
    "cueTimestamp()": FunctionFragment;
    "cumulativeUnitEarningsWei()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,uint256,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "maxBrokerCount()": FunctionFragment;
    "minBrokerCount()": FunctionFragment;
    "minHorizonSeconds()": FunctionFragment;
    "minimumStakeWei()": FunctionFragment;
    "onTokenTransfer(address,uint256,bytes)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setParam(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "totalSponsorshipsAtCueTimestamp()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addJoinPolicy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allocationWeiPerSecond",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAbleToJoin",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cueAtJoinWei",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cueTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeUnitEarningsWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxBrokerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBrokerCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minHorizonSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakeWei",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onTokenTransfer",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setParam",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSponsorshipsAtCueTimestamp",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addJoinPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allocationWeiPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAbleToJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cueAtJoinWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cueTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeUnitEarningsWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxBrokerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBrokerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minHorizonSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakeWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setParam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSponsorshipsAtCueTimestamp",
    data: BytesLike
  ): Result;

  events: {
    "BrokerJoined(address)": EventFragment;
    "BrokerLeft(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SponsorshipReceived(address,uint256)": EventFragment;
    "StakeAdded(address,uint256,uint256)": EventFragment;
    "StateChanged(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BrokerJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BrokerLeft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorshipReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateChanged"): EventFragment;
}

export type BrokerJoinedEvent = TypedEvent<[string], { broker: string }>;

export type BrokerJoinedEventFilter = TypedEventFilter<BrokerJoinedEvent>;

export type BrokerLeftEvent = TypedEvent<
  [string, BigNumber],
  { broker: string; returnedStakeWei: BigNumber }
>;

export type BrokerLeftEventFilter = TypedEventFilter<BrokerLeftEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SponsorshipReceivedEvent = TypedEvent<
  [string, BigNumber],
  { sponsor: string; amount: BigNumber }
>;

export type SponsorshipReceivedEventFilter =
  TypedEventFilter<SponsorshipReceivedEvent>;

export type StakeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { broker: string; addedWei: BigNumber; totalWei: BigNumber }
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export type StateChangedEvent = TypedEvent<[number], { newState: number }>;

export type StateChangedEventFilter = TypedEventFilter<StateChangedEvent>;

export interface MinimumStakeJoinPolicy extends BaseContract {
  contractName: "MinimumStakeJoinPolicy";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinimumStakeJoinPolicyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    addJoinPolicy(
      _joinPolicyAddress: string,
      param: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allocationWeiPerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkAbleToJoin(
      broker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cueAtJoinWei(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cueTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    cumulativeUnitEarningsWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      tokenAddress: string,
      initialAllocationWeiPerSecond: BigNumberish,
      initialMinHorizonSeconds: BigNumberish,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    maxBrokerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBrokerCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    minHorizonSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    minimumStakeWei(overrides?: CallOverrides): Promise<[BigNumber]>;

    onTokenTransfer(
      broker: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setParam(
      minimumStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalSponsorshipsAtCueTimestamp(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  addJoinPolicy(
    _joinPolicyAddress: string,
    param: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allocationWeiPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  checkAbleToJoin(
    broker: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cueAtJoinWei(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cueTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  cumulativeUnitEarningsWei(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    tokenAddress: string,
    initialAllocationWeiPerSecond: BigNumberish,
    initialMinHorizonSeconds: BigNumberish,
    trustedForwarderAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  maxBrokerCount(overrides?: CallOverrides): Promise<BigNumber>;

  minBrokerCount(overrides?: CallOverrides): Promise<BigNumber>;

  minHorizonSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  minimumStakeWei(overrides?: CallOverrides): Promise<BigNumber>;

  onTokenTransfer(
    broker: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setParam(
    minimumStake: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  totalSponsorshipsAtCueTimestamp(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    addJoinPolicy(
      _joinPolicyAddress: string,
      param: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allocationWeiPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    checkAbleToJoin(
      broker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cueAtJoinWei(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cueTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeUnitEarningsWei(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      tokenAddress: string,
      initialAllocationWeiPerSecond: BigNumberish,
      initialMinHorizonSeconds: BigNumberish,
      trustedForwarderAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    maxBrokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    minBrokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    minHorizonSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeWei(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      broker: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setParam(
      minimumStake: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    totalSponsorshipsAtCueTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BrokerJoined(address)"(broker?: string | null): BrokerJoinedEventFilter;
    BrokerJoined(broker?: string | null): BrokerJoinedEventFilter;

    "BrokerLeft(address,uint256)"(
      broker?: string | null,
      returnedStakeWei?: null
    ): BrokerLeftEventFilter;
    BrokerLeft(
      broker?: string | null,
      returnedStakeWei?: null
    ): BrokerLeftEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SponsorshipReceived(address,uint256)"(
      sponsor?: string | null,
      amount?: null
    ): SponsorshipReceivedEventFilter;
    SponsorshipReceived(
      sponsor?: string | null,
      amount?: null
    ): SponsorshipReceivedEventFilter;

    "StakeAdded(address,uint256,uint256)"(
      broker?: string | null,
      addedWei?: null,
      totalWei?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      broker?: string | null,
      addedWei?: null,
      totalWei?: null
    ): StakeAddedEventFilter;

    "StateChanged(uint8)"(newState?: null): StateChangedEventFilter;
    StateChanged(newState?: null): StateChangedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    addJoinPolicy(
      _joinPolicyAddress: string,
      param: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allocationWeiPerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    checkAbleToJoin(
      broker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cueAtJoinWei(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cueTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    cumulativeUnitEarningsWei(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      tokenAddress: string,
      initialAllocationWeiPerSecond: BigNumberish,
      initialMinHorizonSeconds: BigNumberish,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxBrokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    minBrokerCount(overrides?: CallOverrides): Promise<BigNumber>;

    minHorizonSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    minimumStakeWei(overrides?: CallOverrides): Promise<BigNumber>;

    onTokenTransfer(
      broker: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setParam(
      minimumStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalSponsorshipsAtCueTimestamp(
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addJoinPolicy(
      _joinPolicyAddress: string,
      param: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allocationWeiPerSecond(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAbleToJoin(
      broker: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cueAtJoinWei(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cueTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cumulativeUnitEarningsWei(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      tokenAddress: string,
      initialAllocationWeiPerSecond: BigNumberish,
      initialMinHorizonSeconds: BigNumberish,
      trustedForwarderAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxBrokerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBrokerCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minHorizonSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumStakeWei(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onTokenTransfer(
      broker: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setParam(
      minimumStake: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSponsorshipsAtCueTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
