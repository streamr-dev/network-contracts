/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StreamRegistryTimeBasedInterface extends utils.Interface {
  contractName: "StreamRegistryTimeBased";
  functions: {
    "createStream(string)": FunctionFragment;
    "deleteStream(uint256)": FunctionFragment;
    "editStream(uint256,string)": FunctionFragment;
    "getDescription(uint256)": FunctionFragment;
    "rollingId()": FunctionFragment;
    "streamIdToMetadata(uint256)": FunctionFragment;
    "streamIdToPermissions(uint256,address)": FunctionFragment;
    "transferPublishRights(uint256,address,uint8)": FunctionFragment;
    "transferViewTime(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createStream",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editStream",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDescription",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rollingId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "streamIdToMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "streamIdToPermissions",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPublishRights",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferViewTime",
    values: [BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollingId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "streamIdToMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamIdToPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPublishRights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferViewTime",
    data: BytesLike
  ): Result;

  events: {
    "StreamCreated(uint256,address,string)": EventFragment;
    "TransferedPublishRights(uint256,address,address,uint8)": EventFragment;
    "TransferedViewRights(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StreamCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferedPublishRights"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferedViewRights"): EventFragment;
}

export type StreamCreatedEvent = TypedEvent<
  [BigNumber, string, string],
  { id: BigNumber; owner: string; metadata: string }
>;

export type StreamCreatedEventFilter = TypedEventFilter<StreamCreatedEvent>;

export type TransferedPublishRightsEvent = TypedEvent<
  [BigNumber, string, string, number],
  { streamid: BigNumber; from: string; to: string; amount: number }
>;

export type TransferedPublishRightsEventFilter =
  TypedEventFilter<TransferedPublishRightsEvent>;

export type TransferedViewRightsEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  { streamid: BigNumber; from: string; to: string; amount: BigNumber }
>;

export type TransferedViewRightsEventFilter =
  TypedEventFilter<TransferedViewRightsEvent>;

export interface StreamRegistryTimeBased extends BaseContract {
  contractName: "StreamRegistryTimeBased";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StreamRegistryTimeBasedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createStream(
      desc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteStream(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    editStream(
      id: BigNumberish,
      desc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDescription(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { des: string }>;

    rollingId(overrides?: CallOverrides): Promise<[BigNumber]>;

    streamIdToMetadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    streamIdToPermissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        isAdmin: boolean;
        publishRights: number;
        subscriptionExpirationTime: BigNumber;
      }
    >;

    transferPublishRights(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferViewTime(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createStream(
    desc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteStream(
    id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  editStream(
    id: BigNumberish,
    desc: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDescription(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  rollingId(overrides?: CallOverrides): Promise<BigNumber>;

  streamIdToMetadata(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  streamIdToPermissions(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber] & {
      isAdmin: boolean;
      publishRights: number;
      subscriptionExpirationTime: BigNumber;
    }
  >;

  transferPublishRights(
    id: BigNumberish,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferViewTime(
    id: BigNumberish,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createStream(desc: string, overrides?: CallOverrides): Promise<void>;

    deleteStream(id: BigNumberish, overrides?: CallOverrides): Promise<void>;

    editStream(
      id: BigNumberish,
      desc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDescription(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rollingId(overrides?: CallOverrides): Promise<BigNumber>;

    streamIdToMetadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    streamIdToPermissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber] & {
        isAdmin: boolean;
        publishRights: number;
        subscriptionExpirationTime: BigNumber;
      }
    >;

    transferPublishRights(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferViewTime(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "StreamCreated(uint256,address,string)"(
      id?: null,
      owner?: null,
      metadata?: null
    ): StreamCreatedEventFilter;
    StreamCreated(
      id?: null,
      owner?: null,
      metadata?: null
    ): StreamCreatedEventFilter;

    "TransferedPublishRights(uint256,address,address,uint8)"(
      streamid?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TransferedPublishRightsEventFilter;
    TransferedPublishRights(
      streamid?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TransferedPublishRightsEventFilter;

    "TransferedViewRights(uint256,address,address,uint256)"(
      streamid?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TransferedViewRightsEventFilter;
    TransferedViewRights(
      streamid?: null,
      from?: null,
      to?: null,
      amount?: null
    ): TransferedViewRightsEventFilter;
  };

  estimateGas: {
    createStream(
      desc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteStream(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    editStream(
      id: BigNumberish,
      desc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDescription(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollingId(overrides?: CallOverrides): Promise<BigNumber>;

    streamIdToMetadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    streamIdToPermissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferPublishRights(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferViewTime(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createStream(
      desc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteStream(
      id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    editStream(
      id: BigNumberish,
      desc: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDescription(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollingId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    streamIdToMetadata(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    streamIdToPermissions(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferPublishRights(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferViewTime(
      id: BigNumberish,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
