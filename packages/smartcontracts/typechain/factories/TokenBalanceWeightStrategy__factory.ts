/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenBalanceWeightStrategy,
  TokenBalanceWeightStrategyInterface,
} from "../TokenBalanceWeightStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "getWeight",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161022238038061022283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61018f806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063ac6c52511461003b578063fc0c546a14610061575b600080fd5b61004e610049366004610110565b61008c565b6040519081526020015b60405180910390f35b600054610074906001600160a01b031681565b6040516001600160a01b039091168152602001610058565b600080546040516370a0823160e01b81526001600160a01b038481166004830152909116906370a082319060240160206040518083038186803b1580156100d257600080fd5b505afa1580156100e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010a9190610140565b92915050565b60006020828403121561012257600080fd5b81356001600160a01b038116811461013957600080fd5b9392505050565b60006020828403121561015257600080fd5b505191905056fea2646970667358221220a859875e478423d6fcdcb6760973324677fcfccf026ea0c6536b520fef07a71664736f6c63430008090033";

type TokenBalanceWeightStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenBalanceWeightStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenBalanceWeightStrategy__factory extends ContractFactory {
  constructor(...args: TokenBalanceWeightStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TokenBalanceWeightStrategy";
  }

  deploy(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenBalanceWeightStrategy> {
    return super.deploy(
      tokenAddress,
      overrides || {}
    ) as Promise<TokenBalanceWeightStrategy>;
  }
  getDeployTransaction(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenAddress, overrides || {});
  }
  attach(address: string): TokenBalanceWeightStrategy {
    return super.attach(address) as TokenBalanceWeightStrategy;
  }
  connect(signer: Signer): TokenBalanceWeightStrategy__factory {
    return super.connect(signer) as TokenBalanceWeightStrategy__factory;
  }
  static readonly contractName: "TokenBalanceWeightStrategy";
  public readonly contractName: "TokenBalanceWeightStrategy";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenBalanceWeightStrategyInterface {
    return new utils.Interface(_abi) as TokenBalanceWeightStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenBalanceWeightStrategy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TokenBalanceWeightStrategy;
  }
}
