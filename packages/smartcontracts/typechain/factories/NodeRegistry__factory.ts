/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { NodeRegistry, NodeRegistryInterface } from "../NodeRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "NodeRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "isNew",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "lastSeen",
        type: "uint256",
      },
    ],
    name: "NodeUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "NodeWhitelistApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "NodeWhitelistRejected",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "RequiresWhitelistChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "node",
        type: "address",
      },
      {
        internalType: "string",
        name: "metadata_",
        type: "string",
      },
    ],
    name: "createOrUpdateNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "metadata_",
        type: "string",
      },
    ],
    name: "createOrUpdateNodeSelf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "getNode",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nodeAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "lastSeen",
            type: "uint256",
          },
        ],
        internalType: "struct NodeRegistry.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
    ],
    name: "getNodeByNumber",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nodeAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "lastSeen",
            type: "uint256",
          },
        ],
        internalType: "struct NodeRegistry.Node",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getNodes",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nodeAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "lastSeen",
            type: "uint256",
          },
        ],
        internalType: "struct NodeRegistry.Node[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "headNode",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "bool",
        name: "requiresWhitelist_",
        type: "bool",
      },
      {
        internalType: "address[]",
        name: "initialNodes",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "initialMetadata",
        type: "string[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "kickOut",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nodeCount",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nodes",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "nodeAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "lastSeen",
            type: "uint256",
          },
        ],
        internalType: "struct NodeRegistry.Node",
        name: "node",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "next",
        type: "address",
      },
      {
        internalType: "address",
        name: "prev",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "removeNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "removeNodeSelf",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "requiresWhitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "setRequiresWhitelist",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tailNode",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "enum NodeRegistry.WhitelistState",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "whitelistApproveNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "whitelistRejectNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b506080516122e561004560003960008181610678015281816106b801528181610741015261078101526122e56000f3fe6080604052600436106101405760003560e01c80638da5cb5b116100b6578063b2b99ec91161006f578063b2b99ec9146103c7578063bfdf0866146103e7578063e29581aa1461040e578063e670c15d14610430578063ecf274da14610445578063f2fde38b1461046557600080fd5b80638da5cb5b146102d757806399e68eea146102ec5780639b19251a1461030c5780639d20904814610349578063a5ee5b4114610376578063ae5b4961146103a757600080fd5b80634f1ef286116101085780634f1ef286146102175780635668c8fb1461022a5780635888799c1461024a5780635d8f7f2a1461026a5780636da49b831461028a578063715018a6146102c257600080fd5b8063189a5a171461014557806320a59a031461017d5780632af575801461019f5780633659cfe6146101bf57806346c198f6146101df575b600080fd5b34801561015157600080fd5b50610165610160366004611ab8565b610485565b60405161017493929190611b6a565b60405180910390f35b34801561018957600080fd5b5061019d610198366004611bad565b610571565b005b3480156101ab57600080fd5b5061019d6101ba366004611ab8565b6105f2565b3480156101cb57600080fd5b5061019d6101da366004611ab8565b61066d565b3480156101eb57600080fd5b5060ca546101ff906001600160a01b031681565b6040516001600160a01b039091168152602001610174565b61019d610225366004611c65565b610736565b34801561023657600080fd5b5061019d610245366004611ab8565b6107f0565b34801561025657600080fd5b5061019d610265366004611ab8565b610831565b34801561027657600080fd5b5061019d610285366004611ce6565b6108ac565b34801561029657600080fd5b5060c9546102aa906001600160401b031681565b6040516001600160401b039091168152602001610174565b3480156102ce57600080fd5b5061019d6108e5565b3480156102e357600080fd5b506101ff610920565b3480156102f857600080fd5b5061019d610307366004611d29565b61092f565b34801561031857600080fd5b5061033c610327366004611ab8565b60cc6020526000908152604090205460ff1681565b6040516101749190611d7b565b34801561035557600080fd5b50610369610364366004611ab8565b6109b5565b6040516101749190611da3565b34801561038257600080fd5b5060ca5461039790600160a01b900460ff1681565b6040519015158152602001610174565b3480156103b357600080fd5b506103696103c2366004611db6565b610a93565b3480156103d357600080fd5b5061019d6103e2366004611ab8565b610c09565b3480156103f357600080fd5b5060c9546101ff90600160401b90046001600160a01b031681565b34801561041a57600080fd5b50610423610c41565b6040516101749190611dcf565b34801561043c57600080fd5b5061019d610dd8565b34801561045157600080fd5b5061019d610460366004611ee3565b610de1565b34801561047157600080fd5b5061019d610480366004611ab8565b610f71565b60cb6020908152600091825260409182902082516060810190935280546001600160a01b03168352600181018054919392849290840191906104c690611fc5565b80601f01602080910402602001604051908101604052809291908181526020018280546104f290611fc5565b801561053f5780601f106105145761010080835404028352916020019161053f565b820191906000526020600020905b81548152906001019060200180831161052257829003601f168201915b505050918352505060029190910154602090910152600382015460049092015490916001600160a01b03908116911683565b3361057a610920565b6001600160a01b0316146105a95760405162461bcd60e51b81526004016105a090612000565b60405180910390fd5b60ca805460ff60a01b1916600160a01b831515908102919091179091556040517f7623db9c426686f05cec977c4cadb8ff9657502540ca665ae347731114dac69d90600090a250565b336105fb610920565b6001600160a01b0316146106215760405162461bcd60e51b81526004016105a090612000565b6001600160a01b038116600081815260cc6020526040808220805460ff19166002179055517fbbe2a784aa6240d8175fa65a8459058efd8f44c5ab66caa2525fe9d6342108789190a250565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156106b65760405162461bcd60e51b81526004016105a090612035565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166106e861100e565b6001600160a01b03161461070e5760405162461bcd60e51b81526004016105a090612081565b6107178161103c565b604080516000808252602082019092526107339183919061106b565b50565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016141561077f5760405162461bcd60e51b81526004016105a090612035565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166107b161100e565b6001600160a01b0316146107d75760405162461bcd60e51b81526004016105a090612081565b6107e08261103c565b6107ec8282600161106b565b5050565b336107f9610920565b6001600160a01b03161461081f5760405162461bcd60e51b81526004016105a090612000565b610828816105f2565b61073381610c09565b3361083a610920565b6001600160a01b0316146108605760405162461bcd60e51b81526004016105a090612000565b6001600160a01b038116600081815260cc6020526040808220805460ff19166001179055517fdfe83f699699403a4b116b6f9504680228c3f319bbf5ab26b48a81d3005d98b29190a250565b336108b5610920565b6001600160a01b0316146108db5760405162461bcd60e51b81526004016105a090612000565b6107ec82826111af565b336108ee610920565b6001600160a01b0316146109145760405162461bcd60e51b81526004016105a090612000565b61091e60006113fa565b565b6097546001600160a01b031690565b60ca54600160a01b900460ff16158061096b5750600133600090815260cc602052604090205460ff16600281111561096957610969611d65565b145b6109ab5760405162461bcd60e51b8152602060048201526011602482015270195c9c9bdc97db9bdd105c1c1c9bdd9959607a1b60448201526064016105a0565b61073333826111af565b6109bd6119a3565b6001600160a01b03808316600090815260cb6020908152604091829020825160608101909352805490931682526001830180548492840191906109ff90611fc5565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2b90611fc5565b8015610a785780601f10610a4d57610100808354040283529160200191610a78565b820191906000526020600020905b815481529060010190602001808311610a5b57829003601f168201915b50505050508152602001600282015481525050915050919050565b610a9b6119a3565b60c9546001600160401b03168210610aee5760405162461bcd60e51b81526020600482015260166024820152756572726f725f696e6465784f75744f66426f756e647360501b60448201526064016105a0565b60ca546001600160a01b0316600081815260cb6020526040902060015b848111610b45576003909101546001600160a01b0316600081815260cb602052604090209092509080610b3d816120e3565b915050610b0b565b50604080516060810190915281546001600160a01b0316815260018201805483916020840191610b7490611fc5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba090611fc5565b8015610bed5780601f10610bc257610100808354040283529160200191610bed565b820191906000526020600020905b815481529060010190602001808311610bd057829003601f168201915b5050505050815260200160028201548152505092505050919050565b33610c12610920565b6001600160a01b031614610c385760405162461bcd60e51b81526004016105a090612000565b6107338161144c565b60c9546060906000906001600160401b0390811690811115610c6557610c65611bc8565b604051908082528060200260200182016040528015610c9e57816020015b610c8b6119a3565b815260200190600190039081610c835790505b5060ca549091506001600160a01b031660005b60c9546001600160401b0316811015610dd0576001600160a01b03808316600090815260cb602090815260409182902082516060810190935280549093168252600183018054849284019190610d0690611fc5565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3290611fc5565b8015610d7f5780601f10610d5457610100808354040283529160200191610d7f565b820191906000526020600020905b815481529060010190602001808311610d6257829003601f168201915b50505050508152602001600282015481525050848381518110610da457610da46120fe565b6020908102919091010152600301546001600160a01b0316915080610dc8816120e3565b915050610cb1565b509092915050565b61091e3361144c565b600054610100900460ff16610dfc5760005460ff1615610e00565b303b155b610e635760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105a0565b600054610100900460ff16158015610e85576000805461ffff19166101011790555b610e8d6116ce565b610e95611705565b60ca805460ff60a01b1916600160a01b861515021790558151835114610ef45760405162461bcd60e51b81526020600482015260146024820152736572726f725f626164547261636b65724461746160601b60448201526064016105a0565b60005b8351811015610f4e57610f3c848281518110610f1557610f156120fe565b6020026020010151848381518110610f2f57610f2f6120fe565b60200260200101516108ac565b80610f46816120e3565b915050610ef7565b50610f5885610f71565b8015610f6a576000805461ff00191690555b5050505050565b33610f7a610920565b6001600160a01b031614610fa05760405162461bcd60e51b81526004016105a090612000565b6001600160a01b0381166110055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a0565b610733816113fa565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b33611045610920565b6001600160a01b0316146107335760405162461bcd60e51b81526004016105a090612000565b600061107561100e565b90506110808461173c565b60008351118061108d5750815b1561109e5761109c84846117e1565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff16610f6a57805460ff191660011781556040516001600160a01b038316602482015261111d90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b1790526117e1565b50805460ff1916815561112e61100e565b6001600160a01b0316826001600160a01b0316146111a65760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016105a0565b610f6a856118cc565b6001600160a01b038216600090815260cb60205260408120600281015490919061138957506040805160c0810182526001600160a01b0385811660608301818152608084018790524260a085015283526000602080850182905260c954600160401b900484168587015291815260cb8252939093208251805182546001600160a01b0319169316929092178155818401518051600195929392849261125c928885019291909101906119cd565b506040918201516002919091015560208301516003830180546001600160a01b03199081166001600160a01b0393841617909155939091015160049092018054909316911617905560c980546001600160401b03169060006112bd83612114565b82546001600160401b039182166101009390930a92830291909202199091161790555060c954600160401b90046001600160a01b0316156113345760c954600160401b90046001600160a01b03908116600090815260cb6020526040902060030180546001600160a01b0319169186169190911790555b60ca546001600160a01b03166113605760ca80546001600160a01b0319166001600160a01b0386161790555b60c98054600160401b600160e01b031916600160401b6001600160a01b038716021790556113a6565b825161139e90600184019060208601906119cd565b504260028301555b600282015460405182916001600160a01b038716917f7b8ea65757bf0d882563917834f76c4df069ea7e489c9fc65bf764289792e334916113ec9160018801919061213b565b60405180910390a350505050565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038116600090815260cb6020526040902060028101546114a65760405162461bcd60e51b815260206004820152600e60248201526d195c9c9bdc97db9bdd119bdd5b9960921b60448201526064016105a0565b60048101546001600160a01b0316156114f35760048101546001600160a01b03908116600090815260cb60205260409020600380840154910180546001600160a01b031916919092161790555b60038101546001600160a01b0316156115405760038101546001600160a01b03908116600090815260cb60205260409020600480840154910180546001600160a01b031916919092161790555b60c980546001600160401b0316906000611559836121eb565b91906101000a8154816001600160401b0302191690836001600160401b031602179055505060c960089054906101000a90046001600160a01b03166001600160a01b0316826001600160a01b031614156115ec5760c980546001600160a01b03600160401b8083048216600090815260cb602052604090206004015490911602600160401b600160e01b03199091161790555b60ca546001600160a01b03838116911614156116345760ca80546001600160a01b03808216600090815260cb6020526040902060030154166001600160a01b03199091161790555b6001600160a01b038216600090815260cb6020526040812080546001600160a01b031916815590818161166a6001830182611a51565b5060006002919091018190556003830180546001600160a01b031990811690915560049093018054909316909255506040516001600160a01b038416917fcfc24166db4bb677e857cacabd1541fb2b30645021b27c5130419589b84db52b91a25050565b600054610100900460ff166116f55760405162461bcd60e51b81526004016105a09061220e565b6116fd61190c565b61091e611933565b600054610100900460ff1661172c5760405162461bcd60e51b81526004016105a09061220e565b61173461190c565b61091e61190c565b803b6117a05760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016105a0565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6118405760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016105a0565b600080846001600160a01b03168460405161185b9190612259565b600060405180830381855af49150503d8060008114611896576040519150601f19603f3d011682016040523d82523d6000602084013e61189b565b606091505b50915091506118c3828260405180606001604052806027815260200161228960279139611963565b95945050505050565b6118d58161173c565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff1661091e5760405162461bcd60e51b81526004016105a09061220e565b600054610100900460ff1661195a5760405162461bcd60e51b81526004016105a09061220e565b61091e336113fa565b6060831561197257508161199c565b8251156119825782518084602001fd5b8160405162461bcd60e51b81526004016105a09190612275565b9392505050565b604051806060016040528060006001600160a01b0316815260200160608152602001600081525090565b8280546119d990611fc5565b90600052602060002090601f0160209004810192826119fb5760008555611a41565b82601f10611a1457805160ff1916838001178555611a41565b82800160010185558215611a41579182015b82811115611a41578251825591602001919060010190611a26565b50611a4d929150611a87565b5090565b508054611a5d90611fc5565b6000825580601f10611a6d575050565b601f01602090049060005260206000209081019061073391905b5b80821115611a4d5760008155600101611a88565b80356001600160a01b0381168114611ab357600080fd5b919050565b600060208284031215611aca57600080fd5b61199c82611a9c565b60005b83811015611aee578181015183820152602001611ad6565b83811115611afd576000848401525b50505050565b60008151808452611b1b816020860160208601611ad3565b601f01601f19169290920160200192915050565b60018060a01b0381511682526000602082015160606020850152611b566060850182611b03565b604093840151949093019390935250919050565b606081526000611b7d6060830186611b2f565b6001600160a01b0394851660208401529290931660409091015292915050565b80358015158114611ab357600080fd5b600060208284031215611bbf57600080fd5b61199c82611b9d565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611c0657611c06611bc8565b604052919050565b60006001600160401b03831115611c2757611c27611bc8565b611c3a601f8401601f1916602001611bde565b9050828152838383011115611c4e57600080fd5b828260208301376000602084830101529392505050565b60008060408385031215611c7857600080fd5b611c8183611a9c565b915060208301356001600160401b03811115611c9c57600080fd5b8301601f81018513611cad57600080fd5b611cbc85823560208401611c0e565b9150509250929050565b600082601f830112611cd757600080fd5b61199c83833560208501611c0e565b60008060408385031215611cf957600080fd5b611d0283611a9c565b915060208301356001600160401b03811115611d1d57600080fd5b611cbc85828601611cc6565b600060208284031215611d3b57600080fd5b81356001600160401b03811115611d5157600080fd5b611d5d84828501611cc6565b949350505050565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611d9d57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061199c6020830184611b2f565b600060208284031215611dc857600080fd5b5035919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611e2457603f19888603018452611e12858351611b2f565b94509285019290850190600101611df6565b5092979650505050505050565b60006001600160401b03821115611e4a57611e4a611bc8565b5060051b60200190565b600082601f830112611e6557600080fd5b81356020611e7a611e7583611e31565b611bde565b82815260059290921b84018101918181019086841115611e9957600080fd5b8286015b84811015611ed85780356001600160401b03811115611ebc5760008081fd5b611eca8986838b0101611cc6565b845250918301918301611e9d565b509695505050505050565b60008060008060808587031215611ef957600080fd5b611f0285611a9c565b93506020611f11818701611b9d565b935060408601356001600160401b0380821115611f2d57600080fd5b818801915088601f830112611f4157600080fd5b8135611f4f611e7582611e31565b81815260059190911b8301840190848101908b831115611f6e57600080fd5b938501935b82851015611f9357611f8485611a9c565b82529385019390850190611f73565b965050506060880135925080831115611fab57600080fd5b5050611fb987828801611e54565b91505092959194509250565b600181811c90821680611fd957607f821691505b60208210811415611ffa57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b60006000198214156120f7576120f76120cd565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b0380831681811415612131576121316120cd565b6001019392505050565b60408152600080845481600182811c91508083168061215b57607f831692505b602080841082141561217b57634e487b7160e01b86526022600452602486fd5b604088018490526060880182801561219a57600181146121ab576121d6565b60ff198716825282820197506121d6565b60008c81526020902060005b878110156121d0578154848201529086019084016121b7565b83019850505b50509690960196909652509095945050505050565b60006001600160401b03821680612204576122046120cd565b6000190192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000825161226b818460208701611ad3565b9190910192915050565b60208152600061199c6020830184611b0356fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ebbc96e41f4180eae81ef2a092ba3dffa7fea2bac0b382d708dd77c8074cee8f64736f6c63430008090033";

type NodeRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NodeRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NodeRegistry__factory extends ContractFactory {
  constructor(...args: NodeRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NodeRegistry";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NodeRegistry> {
    return super.deploy(overrides || {}) as Promise<NodeRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NodeRegistry {
    return super.attach(address) as NodeRegistry;
  }
  connect(signer: Signer): NodeRegistry__factory {
    return super.connect(signer) as NodeRegistry__factory;
  }
  static readonly contractName: "NodeRegistry";
  public readonly contractName: "NodeRegistry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NodeRegistryInterface {
    return new utils.Interface(_abi) as NodeRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NodeRegistry {
    return new Contract(address, _abi, signerOrProvider) as NodeRegistry;
  }
}
