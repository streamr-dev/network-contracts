/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NodeDomainNameHelper,
  NodeDomainNameHelperInterface,
} from "../NodeDomainNameHelper";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "requestor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "ipAddress",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "port",
        type: "uint256",
      },
    ],
    name: "Request",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "ipAddress",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "port",
        type: "uint256",
      },
    ],
    name: "request",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101cf806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063dc6ad19e14610030575b600080fd5b61004361003e3660046100a9565b610045565b005b81604051610053919061015e565b6040519081900381208282529033907ff69a88136bb57871f0559f33e167c9cc90ed27fb806571f9bd595ccea42000829060200160405180910390a35050565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156100bc57600080fd5b823567ffffffffffffffff808211156100d457600080fd5b818501915085601f8301126100e857600080fd5b8135818111156100fa576100fa610093565b604051601f8201601f19908116603f0116810190838211818310171561012257610122610093565b8160405282815288602084870101111561013b57600080fd5b826020860160208301376000602093820184015298969091013596505050505050565b6000825160005b8181101561017f5760208186018101518583015201610165565b8181111561018e576000828501525b50919091019291505056fea26469706673582212203224b44c701e51be52c2fb69fce59c24d9e3d0eb85c458942e72b5a5c95d75e764736f6c63430008090033";

type NodeDomainNameHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NodeDomainNameHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NodeDomainNameHelper__factory extends ContractFactory {
  constructor(...args: NodeDomainNameHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "NodeDomainNameHelper";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<NodeDomainNameHelper> {
    return super.deploy(overrides || {}) as Promise<NodeDomainNameHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): NodeDomainNameHelper {
    return super.attach(address) as NodeDomainNameHelper;
  }
  connect(signer: Signer): NodeDomainNameHelper__factory {
    return super.connect(signer) as NodeDomainNameHelper__factory;
  }
  static readonly contractName: "NodeDomainNameHelper";
  public readonly contractName: "NodeDomainNameHelper";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NodeDomainNameHelperInterface {
    return new utils.Interface(_abi) as NodeDomainNameHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NodeDomainNameHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as NodeDomainNameHelper;
  }
}
