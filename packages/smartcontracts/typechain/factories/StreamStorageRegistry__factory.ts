/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StreamStorageRegistry,
  StreamStorageRegistryInterface,
} from "../StreamStorageRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "streamId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "Added",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "streamId",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "Removed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "streamId",
        type: "string",
      },
      {
        internalType: "address[]",
        name: "addNodes",
        type: "address[]",
      },
      {
        internalType: "address[]",
        name: "removeNodes",
        type: "address[]",
      },
    ],
    name: "addAndRemoveStorageNodes",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "streamId",
        type: "string",
      },
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "addStorageNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "streamRegistryAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "nodeRegistryAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "trustedForwarderAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "streamId",
        type: "string",
      },
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "isStorageNodeOf",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nodeRegistry",
    outputs: [
      {
        internalType: "contract NodeRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "pairs",
    outputs: [
      {
        internalType: "uint256",
        name: "dateCreated",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "streamId",
        type: "string",
      },
      {
        internalType: "address",
        name: "nodeAddress",
        type: "address",
      },
    ],
    name: "removeStorageNode",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "streamRegistry",
    outputs: [
      {
        internalType: "contract StreamRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b50608051611e0261004560003960008181610268015281816102b10152818161033a015261037a0152611e026000f3fe60806040526004361061009c5760003560e01c8063842107cd11610064578063842107cd14610190578063a030f2df146101b0578063a1aeaf22146101d0578063c0c53b8b146101f0578063d9b5c4a514610210578063e36421531461023d57600080fd5b80633659cfe6146100a15780634f1ef286146100c3578063572b6c05146100d6578063749d18d71461011a57806380e9f2ba1461013a575b600080fd5b3480156100ad57600080fd5b506100c16100bc366004611629565b61025d565b005b6100c16100d1366004611719565b61032f565b3480156100e257600080fd5b506101056100f1366004611629565b6097546001600160a01b0391821691161490565b60405190151581526020015b60405180910390f35b34801561012657600080fd5b506100c16101353660046117c4565b6103e9565b34801561014657600080fd5b5061018261015536600461181a565b815160208184018101805160cb825292820194820194909420919093529091526000908152604090205481565b604051908152602001610111565b34801561019c57600080fd5b506100c16101ab3660046117c4565b610646565b3480156101bc57600080fd5b506101056101cb3660046117c4565b610950565b3480156101dc57600080fd5b506100c16101eb3660046118c3565b610ac1565b3480156101fc57600080fd5b506100c161020b36600461195c565b610e6b565b34801561021c57600080fd5b5060ca54610230906001600160a01b031681565b604051610111919061199c565b34801561024957600080fd5b5060c954610230906001600160a01b031681565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156102af5760405162461bcd60e51b81526004016102a6906119b0565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166102e1610f60565b6001600160a01b0316146103075760405162461bcd60e51b81526004016102a6906119fc565b61031081610f8e565b6040805160008082526020820190925261032c918391906110ca565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156103785760405162461bcd60e51b81526004016102a6906119b0565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166103aa610f60565b6001600160a01b0316146103d05760405162461bcd60e51b81526004016102a6906119fc565b6103d982610f8e565b6103e5828260016110ca565b5050565b60c95460405163130d191f60e11b8152849184916001600160a01b039091169063261a323e9061041f9085908590600401611a71565b60206040518083038186803b15801561043757600080fd5b505afa15801561044b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046f9190611a8d565b61048b5760405162461bcd60e51b81526004016102a690611aaf565b60c9546040805162353f8560e81b815290516000926001600160a01b0316916391d1485491839163353f8500916004808301926020929190829003018186803b1580156104d757600080fd5b505afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190611ae1565b610517611211565b6040518363ffffffff1660e01b8152600401610534929190611afa565b60206040518083038186803b15801561054c57600080fd5b505afa158015610560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105849190611a8d565b9050806106335760c9546001600160a01b03166388b2103884846105a6611211565b60006040518563ffffffff1660e01b81526004016105c79493929190611b11565b60206040518083038186803b1580156105df57600080fd5b505afa1580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190611a8d565b6106335760405162461bcd60e51b81526004016102a690611b63565b61063e868686611239565b505050505050565b60c95460405163130d191f60e11b8152849184916001600160a01b039091169063261a323e9061067c9085908590600401611a71565b60206040518083038186803b15801561069457600080fd5b505afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc9190611a8d565b6106e85760405162461bcd60e51b81526004016102a690611aaf565b60c9546040805162353f8560e81b815290516000926001600160a01b0316916391d1485491839163353f8500916004808301926020929190829003018186803b15801561073457600080fd5b505afa158015610748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076c9190611ae1565b610774611211565b6040518363ffffffff1660e01b8152600401610791929190611afa565b60206040518083038186803b1580156107a957600080fd5b505afa1580156107bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e19190611a8d565b9050806108905760c9546001600160a01b03166388b210388484610803611211565b60006040518563ffffffff1660e01b81526004016108249493929190611b11565b60206040518083038186803b15801561083c57600080fd5b505afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190611a8d565b6108905760405162461bcd60e51b81526004016102a690611b63565b60ca546040516313a4120960e31b81526000916001600160a01b031690639d209048906108c190889060040161199c565b60006040518083038186803b1580156108d957600080fd5b505afa1580156108ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109159190810190611bbf565b905080604001516000141561093c5760405162461bcd60e51b81526004016102a690611c85565b6109478787876112b2565b50505050505050565b60c95460405163130d191f60e11b81526000916001600160a01b03169063261a323e906109839087908790600401611a71565b60206040518083038186803b15801561099b57600080fd5b505afa1580156109af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d39190611a8d565b6109df57506000610aba565b60ca546040516313a4120960e31b81526000916001600160a01b031690639d20904890610a1090869060040161199c565b60006040518083038186803b158015610a2857600080fd5b505afa158015610a3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a649190810190611bbf565b9050806040015160001415610a7d576000915050610aba565b60cb8585604051610a8f929190611cbc565b90815260408051602092819003830190206001600160a01b0386166000908152925290205415159150505b9392505050565b60c95460405163130d191f60e11b8152879187916001600160a01b039091169063261a323e90610af79085908590600401611a71565b60206040518083038186803b158015610b0f57600080fd5b505afa158015610b23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b479190611a8d565b610b635760405162461bcd60e51b81526004016102a690611aaf565b60c9546040805162353f8560e81b815290516000926001600160a01b0316916391d1485491839163353f8500916004808301926020929190829003018186803b158015610baf57600080fd5b505afa158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be79190611ae1565b610bef611211565b6040518363ffffffff1660e01b8152600401610c0c929190611afa565b60206040518083038186803b158015610c2457600080fd5b505afa158015610c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5c9190611a8d565b905080610d0b5760c9546001600160a01b03166388b210388484610c7e611211565b60006040518563ffffffff1660e01b8152600401610c9f9493929190611b11565b60206040518083038186803b158015610cb757600080fd5b505afa158015610ccb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cef9190611a8d565b610d0b5760405162461bcd60e51b81526004016102a690611b63565b60005b86811015610e10576000888883818110610d2a57610d2a611ccc565b9050602002016020810190610d3f9190611629565b60ca546040516313a4120960e31b81529192506000916001600160a01b0390911690639d20904890610d7590859060040161199c565b60006040518083038186803b158015610d8d57600080fd5b505afa158015610da1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dc99190810190611bbf565b9050806040015160001415610df05760405162461bcd60e51b81526004016102a690611c85565b610dfb8c8c846112b2565b50508080610e0890611ce2565b915050610d0e565b5060005b84811015610e5f57610e4d8a8a888885818110610e3357610e33611ccc565b9050602002016020810190610e489190611629565b611239565b80610e5781611ce2565b915050610e14565b50505050505050505050565b600054610100900460ff16610e865760005460ff1615610e8a565b303b155b610eed5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016102a6565b600054610100900460ff16158015610f0f576000805461ffff19166101011790555b60c980546001600160a01b038087166001600160a01b03199283161790925560ca805492861692909116919091179055610f4882611361565b8015610f5a576000805461ff00191690555b50505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b60c9546040805162353f8560e81b815290516001600160a01b03909216916391d1485491839163353f850091600480820192602092909190829003018186803b158015610fda57600080fd5b505afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110129190611ae1565b61101a611211565b6040518363ffffffff1660e01b8152600401611037929190611afa565b60206040518083038186803b15801561104f57600080fd5b505afa158015611063573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110879190611a8d565b61032c5760405162461bcd60e51b81526020600482015260146024820152736572726f725f6e6f7454727573746564526f6c6560601b60448201526064016102a6565b60006110d4610f60565b90506110df84611399565b6000835111806110ec5750815b156110fd576110fb848461143e565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff1661120a57805460ff1916600117815560405161117890869061114990859060240161199c565b60408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b17905261143e565b50805460ff19168155611189610f60565b6001600160a01b0316826001600160a01b0316146112015760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b60648201526084016102a6565b61120a85611529565b5050505050565b6097546000906001600160a01b0316331415611234575060131936013560601c90565b503390565b60cb838360405161124b929190611cbc565b90815260408051602092819003830181206001600160a01b038516600081815291909452918220919091557f264d05230c1929427b5dcfcf1c83668ac376e215a2c35cb0e2c21816bbe28d06906112a59086908690611a71565b60405180910390a2505050565b60cb83836040516112c4929190611cbc565b90815260408051602092819003830190206001600160a01b03841660009081529252902054611326574260cb8484604051611300929190611cbc565b90815260408051602092819003830190206001600160a01b038516600090815292529020555b806001600160a01b03167ffb989cb0d132b51483b9258c1befbe92caa5f5b046af3dfdcc617dcf425af49384846040516112a5929190611a71565b600054610100900460ff166113885760405162461bcd60e51b81526004016102a690611d0b565b611390611569565b61032c81611592565b803b6113fd5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016102a6565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b61149d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016102a6565b600080846001600160a01b0316846040516114b89190611d56565b600060405180830381855af49150503d80600081146114f3576040519150601f19603f3d011682016040523d82523d6000602084013e6114f8565b606091505b50915091506115208282604051806060016040528060278152602001611da6602791396115db565b95945050505050565b61153281611399565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff166115905760405162461bcd60e51b81526004016102a690611d0b565b565b600054610100900460ff166115b95760405162461bcd60e51b81526004016102a690611d0b565b609780546001600160a01b0319166001600160a01b0392909216919091179055565b606083156115ea575081610aba565b8251156115fa5782518084602001fd5b8160405162461bcd60e51b81526004016102a69190611d72565b6001600160a01b038116811461032c57600080fd5b60006020828403121561163b57600080fd5b8135610aba81611614565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171561167e5761167e611646565b60405290565b604051601f8201601f191681016001600160401b03811182821017156116ac576116ac611646565b604052919050565b60006001600160401b038211156116cd576116cd611646565b50601f01601f191660200190565b60006116ee6116e9846116b4565b611684565b905082815283838301111561170257600080fd5b828260208301376000602084830101529392505050565b6000806040838503121561172c57600080fd5b823561173781611614565b915060208301356001600160401b0381111561175257600080fd5b8301601f8101851361176357600080fd5b611772858235602084016116db565b9150509250929050565b60008083601f84011261178e57600080fd5b5081356001600160401b038111156117a557600080fd5b6020830191508360208285010111156117bd57600080fd5b9250929050565b6000806000604084860312156117d957600080fd5b83356001600160401b038111156117ef57600080fd5b6117fb8682870161177c565b909450925050602084013561180f81611614565b809150509250925092565b6000806040838503121561182d57600080fd5b82356001600160401b0381111561184357600080fd5b8301601f8101851361185457600080fd5b611863858235602084016116db565b925050602083013561187481611614565b809150509250929050565b60008083601f84011261189157600080fd5b5081356001600160401b038111156118a857600080fd5b6020830191508360208260051b85010111156117bd57600080fd5b600080600080600080606087890312156118dc57600080fd5b86356001600160401b03808211156118f357600080fd5b6118ff8a838b0161177c565b9098509650602089013591508082111561191857600080fd5b6119248a838b0161187f565b9096509450604089013591508082111561193d57600080fd5b5061194a89828a0161187f565b979a9699509497509295939492505050565b60008060006060848603121561197157600080fd5b833561197c81611614565b9250602084013561198c81611614565b9150604084013561180f81611614565b6001600160a01b0391909116815260200190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000611a85602083018486611a48565b949350505050565b600060208284031215611a9f57600080fd5b81518015158114610aba57600080fd5b602080825260189082015277195c9c9bdc97dcdd1c99585b511bd95cd39bdd115e1a5cdd60421b604082015260600190565b600060208284031215611af357600080fd5b5051919050565b9182526001600160a01b0316602082015260400190565b606081526000611b25606083018688611a48565b6001600160a01b0385166020840152905060058310611b5457634e487b7160e01b600052602160045260246000fd5b82604083015295945050505050565b60208082526016908201527532b93937b92fb737a2b234ba2832b936b4b9b9b4b7b760511b604082015260600190565b60005b83811015611bae578181015183820152602001611b96565b83811115610f5a5750506000910152565b60006020808385031215611bd257600080fd5b82516001600160401b0380821115611be957600080fd5b9084019060608287031215611bfd57600080fd5b611c0561165c565b8251611c1081611614565b81528284015182811115611c2357600080fd5b83019150601f82018713611c3657600080fd5b8151611c446116e9826116b4565b8181528886838601011115611c5857600080fd5b611c6782878301888701611b93565b80868401525050604083015160408201528094505050505092915050565b6020808252601e908201527f6572726f725f73746f726167654e6f64654e6f74526567697374657265640000604082015260600190565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611d0457634e487b7160e01b600052601160045260246000fd5b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60008251611d68818460208701611b93565b9190910192915050565b6020815260008251806020840152611d91816040850160208701611b93565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203855b5d56f48cb2222acc105b17ad97f8c0a952e29c32a7b363a043fdd12336a64736f6c63430008090033";

type StreamStorageRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StreamStorageRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StreamStorageRegistry__factory extends ContractFactory {
  constructor(...args: StreamStorageRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "StreamStorageRegistry";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StreamStorageRegistry> {
    return super.deploy(overrides || {}) as Promise<StreamStorageRegistry>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): StreamStorageRegistry {
    return super.attach(address) as StreamStorageRegistry;
  }
  connect(signer: Signer): StreamStorageRegistry__factory {
    return super.connect(signer) as StreamStorageRegistry__factory;
  }
  static readonly contractName: "StreamStorageRegistry";
  public readonly contractName: "StreamStorageRegistry";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StreamStorageRegistryInterface {
    return new utils.Interface(_abi) as StreamStorageRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StreamStorageRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StreamStorageRegistry;
  }
}
