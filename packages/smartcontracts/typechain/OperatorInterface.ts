/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface OperatorInterfaceInterface extends utils.Interface {
  contractName: "OperatorInterface";
  functions: {
    "cancelOracleRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "distributeFunds(address[],uint256[])": FunctionFragment;
    "fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)": FunctionFragment;
    "fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)": FunctionFragment;
    "getAuthorizedSenders()": FunctionFragment;
    "getForwarder()": FunctionFragment;
    "isAuthorizedSender(address)": FunctionFragment;
    "operatorRequest(address,uint256,bytes32,bytes4,uint256,uint256,bytes)": FunctionFragment;
    "oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)": FunctionFragment;
    "ownerTransferAndCall(address,uint256,bytes)": FunctionFragment;
    "setAuthorizedSenders(address[])": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawable()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOracleRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFunds",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleRequest",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillOracleRequest2",
    values: [
      BytesLike,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizedSenders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorRequest",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleRequest",
    values: [
      string,
      BigNumberish,
      BytesLike,
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerTransferAndCall",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedSenders",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawable",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillOracleRequest2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerTransferAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedSenders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawable",
    data: BytesLike
  ): Result;

  events: {};
}

export interface OperatorInterface extends BaseContract {
  contractName: "OperatorInterface";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OperatorInterfaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillOracleRequest2(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAuthorizedSenders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getForwarder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAuthorizedSender(
      node: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operatorRequest(
      sender: string,
      payment: BigNumberish,
      specId: BytesLike,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracleRequest(
      sender: string,
      requestPrice: BigNumberish,
      serviceAgreementID: BytesLike,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerTransferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawable(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelOracleRequest(
    requestId: BytesLike,
    payment: BigNumberish,
    callbackFunctionId: BytesLike,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeFunds(
    receivers: string[],
    amounts: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOracleRequest(
    requestId: BytesLike,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: BytesLike,
    expiration: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillOracleRequest2(
    requestId: BytesLike,
    payment: BigNumberish,
    callbackAddress: string,
    callbackFunctionId: BytesLike,
    expiration: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAuthorizedSenders(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getForwarder(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAuthorizedSender(node: string, overrides?: CallOverrides): Promise<boolean>;

  operatorRequest(
    sender: string,
    payment: BigNumberish,
    specId: BytesLike,
    callbackFunctionId: BytesLike,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracleRequest(
    sender: string,
    requestPrice: BigNumberish,
    serviceAgreementID: BytesLike,
    callbackAddress: string,
    callbackFunctionId: BytesLike,
    nonce: BigNumberish,
    dataVersion: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerTransferAndCall(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthorizedSenders(
    senders: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawable(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fulfillOracleRequest2(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAuthorizedSenders(overrides?: CallOverrides): Promise<string[]>;

    getForwarder(overrides?: CallOverrides): Promise<string>;

    isAuthorizedSender(
      node: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operatorRequest(
      sender: string,
      payment: BigNumberish,
      specId: BytesLike,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    oracleRequest(
      sender: string,
      requestPrice: BigNumberish,
      serviceAgreementID: BytesLike,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerTransferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    cancelOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillOracleRequest2(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAuthorizedSenders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getForwarder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAuthorizedSender(
      node: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operatorRequest(
      sender: string,
      payment: BigNumberish,
      specId: BytesLike,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracleRequest(
      sender: string,
      requestPrice: BigNumberish,
      serviceAgreementID: BytesLike,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerTransferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawable(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeFunds(
      receivers: string[],
      amounts: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOracleRequest(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillOracleRequest2(
      requestId: BytesLike,
      payment: BigNumberish,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      expiration: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAuthorizedSenders(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getForwarder(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAuthorizedSender(
      node: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operatorRequest(
      sender: string,
      payment: BigNumberish,
      specId: BytesLike,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracleRequest(
      sender: string,
      requestPrice: BigNumberish,
      serviceAgreementID: BytesLike,
      callbackAddress: string,
      callbackFunctionId: BytesLike,
      nonce: BigNumberish,
      dataVersion: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerTransferAndCall(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthorizedSenders(
      senders: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawable(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
