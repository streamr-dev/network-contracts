// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EarningsWithdrawn extends ethereum.Event {
  get params(): EarningsWithdrawn__Params {
    return new EarningsWithdrawn__Params(this);
  }
}

export class EarningsWithdrawn__Params {
  _event: EarningsWithdrawn;

  constructor(event: EarningsWithdrawn) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class JoinPartAgentAdded extends ethereum.Event {
  get params(): JoinPartAgentAdded__Params {
    return new JoinPartAgentAdded__Params(this);
  }
}

export class JoinPartAgentAdded__Params {
  _event: JoinPartAgentAdded;

  constructor(event: JoinPartAgentAdded) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class JoinPartAgentRemoved extends ethereum.Event {
  get params(): JoinPartAgentRemoved__Params {
    return new JoinPartAgentRemoved__Params(this);
  }
}

export class JoinPartAgentRemoved__Params {
  _event: JoinPartAgentRemoved;

  constructor(event: JoinPartAgentRemoved) {
    this._event = event;
  }

  get agent(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MemberJoined extends ethereum.Event {
  get params(): MemberJoined__Params {
    return new MemberJoined__Params(this);
  }
}

export class MemberJoined__Params {
  _event: MemberJoined;

  constructor(event: MemberJoined) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MemberParted extends ethereum.Event {
  get params(): MemberParted__Params {
    return new MemberParted__Params(this);
  }
}

export class MemberParted__Params {
  _event: MemberParted;

  constructor(event: MemberParted) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MigrateMediator extends ethereum.Event {
  get params(): MigrateMediator__Params {
    return new MigrateMediator__Params(this);
  }
}

export class MigrateMediator__Params {
  _event: MigrateMediator;

  constructor(event: MigrateMediator) {
    this._event = event;
  }

  get newMediator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldMediator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MigrateToken extends ethereum.Event {
  get params(): MigrateToken__Params {
    return new MigrateToken__Params(this);
  }
}

export class MigrateToken__Params {
  _event: MigrateToken;

  constructor(event: MigrateToken) {
    this._event = event;
  }

  get newToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amountMigrated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewEarnings extends ethereum.Event {
  get params(): NewEarnings__Params {
    return new NewEarnings__Params(this);
  }
}

export class NewEarnings__Params {
  _event: NewEarnings;

  constructor(event: NewEarnings) {
    this._event = event;
  }

  get earningsPerMember(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get activeMemberCount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewMemberEthSent extends ethereum.Event {
  get params(): NewMemberEthSent__Params {
    return new NewMemberEthSent__Params(this);
  }
}

export class NewMemberEthSent__Params {
  _event: NewMemberEthSent;

  constructor(event: NewMemberEthSent) {
    this._event = event;
  }

  get amountWei(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RevenueReceived extends ethereum.Event {
  get params(): RevenueReceived__Params {
    return new RevenueReceived__Params(this);
  }
}

export class RevenueReceived__Params {
  _event: RevenueReceived;

  constructor(event: RevenueReceived) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferToAddressInContract extends ethereum.Event {
  get params(): TransferToAddressInContract__Params {
    return new TransferToAddressInContract__Params(this);
  }
}

export class TransferToAddressInContract__Params {
  _event: TransferToAddressInContract;

  constructor(event: TransferToAddressInContract) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferWithinContract extends ethereum.Event {
  get params(): TransferWithinContract__Params {
    return new TransferWithinContract__Params(this);
  }
}

export class TransferWithinContract__Params {
  _event: TransferWithinContract;

  constructor(event: TransferWithinContract) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateNewMemberEth extends ethereum.Event {
  get params(): UpdateNewMemberEth__Params {
    return new UpdateNewMemberEth__Params(this);
  }
}

export class UpdateNewMemberEth__Params {
  _event: UpdateNewMemberEth;

  constructor(event: UpdateNewMemberEth) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DataUnionSidechain__memberDataResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class DataUnionSidechain extends ethereum.SmartContract {
  static bind(address: Address): DataUnionSidechain {
    return new DataUnionSidechain("DataUnionSidechain", address);
  }

  activeMemberCount(): BigInt {
    let result = super.call(
      "activeMemberCount",
      "activeMemberCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_activeMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "activeMemberCount",
      "activeMemberCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dataUnionMainnet(): Address {
    let result = super.call(
      "dataUnionMainnet",
      "dataUnionMainnet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_dataUnionMainnet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dataUnionMainnet",
      "dataUnionMainnet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  inactiveMemberCount(): BigInt {
    let result = super.call(
      "inactiveMemberCount",
      "inactiveMemberCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_inactiveMemberCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "inactiveMemberCount",
      "inactiveMemberCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  joinPartAgentCount(): BigInt {
    let result = super.call(
      "joinPartAgentCount",
      "joinPartAgentCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_joinPartAgentCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joinPartAgentCount",
      "joinPartAgentCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  joinPartAgents(param0: Address): i32 {
    let result = super.call(
      "joinPartAgents",
      "joinPartAgents(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toI32();
  }

  try_joinPartAgents(param0: Address): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "joinPartAgents",
      "joinPartAgents(address):(uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  lifetimeMemberEarnings(): BigInt {
    let result = super.call(
      "lifetimeMemberEarnings",
      "lifetimeMemberEarnings():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lifetimeMemberEarnings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lifetimeMemberEarnings",
      "lifetimeMemberEarnings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  memberData(param0: Address): DataUnionSidechain__memberDataResult {
    let result = super.call(
      "memberData",
      "memberData(address):(uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new DataUnionSidechain__memberDataResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_memberData(
    param0: Address
  ): ethereum.CallResult<DataUnionSidechain__memberDataResult> {
    let result = super.tryCall(
      "memberData",
      "memberData(address):(uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new DataUnionSidechain__memberDataResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  migrationManager(): Address {
    let result = super.call(
      "migrationManager",
      "migrationManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_migrationManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "migrationManager",
      "migrationManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  newMemberEth(): BigInt {
    let result = super.call("newMemberEth", "newMemberEth():(uint256)", []);

    return result[0].toBigInt();
  }

  try_newMemberEth(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("newMemberEth", "newMemberEth():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenMediator(): Address {
    let result = super.call("tokenMediator", "tokenMediator():(address)", []);

    return result[0].toAddress();
  }

  try_tokenMediator(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenMediator",
      "tokenMediator():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalEarnings(): BigInt {
    let result = super.call("totalEarnings", "totalEarnings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalEarnings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEarnings",
      "totalEarnings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalEarningsWithdrawn(): BigInt {
    let result = super.call(
      "totalEarningsWithdrawn",
      "totalEarningsWithdrawn():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalEarningsWithdrawn(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalEarningsWithdrawn",
      "totalEarningsWithdrawn():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onTokenTransfer(param0: Address, param1: BigInt, param2: Bytes): boolean {
    let result = super.call(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromBytes(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_onTokenTransfer(
    param0: Address,
    param1: BigInt,
    param2: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "onTokenTransfer",
      "onTokenTransfer(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromBytes(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getStats(): Array<BigInt> {
    let result = super.call("getStats", "getStats():(uint256[6])", []);

    return result[0].toBigIntArray();
  }

  try_getStats(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getStats", "getStats():(uint256[6])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getEarnings(member: Address): BigInt {
    let result = super.call("getEarnings", "getEarnings(address):(uint256)", [
      ethereum.Value.fromAddress(member)
    ]);

    return result[0].toBigInt();
  }

  try_getEarnings(member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEarnings",
      "getEarnings(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawn(member: Address): BigInt {
    let result = super.call("getWithdrawn", "getWithdrawn(address):(uint256)", [
      ethereum.Value.fromAddress(member)
    ]);

    return result[0].toBigInt();
  }

  try_getWithdrawn(member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawn",
      "getWithdrawn(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWithdrawableEarnings(member: Address): BigInt {
    let result = super.call(
      "getWithdrawableEarnings",
      "getWithdrawableEarnings(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );

    return result[0].toBigInt();
  }

  try_getWithdrawableEarnings(member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithdrawableEarnings",
      "getWithdrawableEarnings(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWithdrawable(): BigInt {
    let result = super.call(
      "totalWithdrawable",
      "totalWithdrawable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalWithdrawable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWithdrawable",
      "totalWithdrawable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  refreshRevenue(): BigInt {
    let result = super.call("refreshRevenue", "refreshRevenue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_refreshRevenue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "refreshRevenue",
      "refreshRevenue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawMembers(members: Array<Address>, sendToMainnet: boolean): BigInt {
    let result = super.call(
      "withdrawMembers",
      "withdrawMembers(address[],bool):(uint256)",
      [
        ethereum.Value.fromAddressArray(members),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawMembers(
    members: Array<Address>,
    sendToMainnet: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawMembers",
      "withdrawMembers(address[],bool):(uint256)",
      [
        ethereum.Value.fromAddressArray(members),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAll(member: Address, sendToMainnet: boolean): BigInt {
    let result = super.call(
      "withdrawAll",
      "withdrawAll(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(member),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawAll(
    member: Address,
    sendToMainnet: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAll",
      "withdrawAll(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(member),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(member: Address, amount: BigInt, sendToMainnet: boolean): BigInt {
    let result = super.call(
      "withdraw",
      "withdraw(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(member),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdraw(
    member: Address,
    amount: BigInt,
    sendToMainnet: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(member),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawAllTo(to: Address, sendToMainnet: boolean): BigInt {
    let result = super.call(
      "withdrawAllTo",
      "withdrawAllTo(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawAllTo(
    to: Address,
    sendToMainnet: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllTo",
      "withdrawAllTo(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawTo(to: Address, amount: BigInt, sendToMainnet: boolean): BigInt {
    let result = super.call(
      "withdrawTo",
      "withdrawTo(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawTo(
    to: Address,
    amount: BigInt,
    sendToMainnet: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawTo",
      "withdrawTo(address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(sendToMainnet)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  signatureIsValid(
    signer: Address,
    recipient: Address,
    amount: BigInt,
    signature: Bytes
  ): boolean {
    let result = super.call(
      "signatureIsValid",
      "signatureIsValid(address,address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBoolean();
  }

  try_signatureIsValid(
    signer: Address,
    recipient: Address,
    amount: BigInt,
    signature: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "signatureIsValid",
      "signatureIsValid(address,address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(signer),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawAllToSigned(
    fromSigner: Address,
    to: Address,
    sendToMainnet: boolean,
    signature: Bytes
  ): BigInt {
    let result = super.call(
      "withdrawAllToSigned",
      "withdrawAllToSigned(address,address,bool,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(fromSigner),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(sendToMainnet),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawAllToSigned(
    fromSigner: Address,
    to: Address,
    sendToMainnet: boolean,
    signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawAllToSigned",
      "withdrawAllToSigned(address,address,bool,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(fromSigner),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromBoolean(sendToMainnet),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdrawToSigned(
    fromSigner: Address,
    to: Address,
    amount: BigInt,
    sendToMainnet: boolean,
    signature: Bytes
  ): BigInt {
    let result = super.call(
      "withdrawToSigned",
      "withdrawToSigned(address,address,uint256,bool,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(fromSigner),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(sendToMainnet),
        ethereum.Value.fromBytes(signature)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawToSigned(
    fromSigner: Address,
    to: Address,
    amount: BigInt,
    sendToMainnet: boolean,
    signature: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawToSigned",
      "withdrawToSigned(address,address,uint256,bool,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(fromSigner),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBoolean(sendToMainnet),
        ethereum.Value.fromBytes(signature)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  toBytes(a: Address): Bytes {
    let result = super.call("toBytes", "toBytes(address):(bytes)", [
      ethereum.Value.fromAddress(a)
    ]);

    return result[0].toBytes();
  }

  try_toBytes(a: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("toBytes", "toBytes(address):(bytes)", [
      ethereum.Value.fromAddress(a)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall extends ethereum.Call {
  get inputs(): ClaimOwnershipCall__Inputs {
    return new ClaimOwnershipCall__Inputs(this);
  }

  get outputs(): ClaimOwnershipCall__Outputs {
    return new ClaimOwnershipCall__Outputs(this);
  }
}

export class ClaimOwnershipCall__Inputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class ClaimOwnershipCall__Outputs {
  _call: ClaimOwnershipCall;

  constructor(call: ClaimOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _migrationManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get initialJoinPartAgents(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }

  get mainnetDataUnionAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get defaultNewMemberEth(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get success(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class OnTokenBridgedCall extends ethereum.Call {
  get inputs(): OnTokenBridgedCall__Inputs {
    return new OnTokenBridgedCall__Inputs(this);
  }

  get outputs(): OnTokenBridgedCall__Outputs {
    return new OnTokenBridgedCall__Outputs(this);
  }
}

export class OnTokenBridgedCall__Inputs {
  _call: OnTokenBridgedCall;

  constructor(call: OnTokenBridgedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenBridgedCall__Outputs {
  _call: OnTokenBridgedCall;

  constructor(call: OnTokenBridgedCall) {
    this._call = call;
  }
}

export class SetNewMemberEthCall extends ethereum.Call {
  get inputs(): SetNewMemberEthCall__Inputs {
    return new SetNewMemberEthCall__Inputs(this);
  }

  get outputs(): SetNewMemberEthCall__Outputs {
    return new SetNewMemberEthCall__Outputs(this);
  }
}

export class SetNewMemberEthCall__Inputs {
  _call: SetNewMemberEthCall;

  constructor(call: SetNewMemberEthCall) {
    this._call = call;
  }

  get val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetNewMemberEthCall__Outputs {
  _call: SetNewMemberEthCall;

  constructor(call: SetNewMemberEthCall) {
    this._call = call;
  }
}

export class AddJoinPartAgentsCall extends ethereum.Call {
  get inputs(): AddJoinPartAgentsCall__Inputs {
    return new AddJoinPartAgentsCall__Inputs(this);
  }

  get outputs(): AddJoinPartAgentsCall__Outputs {
    return new AddJoinPartAgentsCall__Outputs(this);
  }
}

export class AddJoinPartAgentsCall__Inputs {
  _call: AddJoinPartAgentsCall;

  constructor(call: AddJoinPartAgentsCall) {
    this._call = call;
  }

  get agents(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddJoinPartAgentsCall__Outputs {
  _call: AddJoinPartAgentsCall;

  constructor(call: AddJoinPartAgentsCall) {
    this._call = call;
  }
}

export class AddJoinPartAgentCall extends ethereum.Call {
  get inputs(): AddJoinPartAgentCall__Inputs {
    return new AddJoinPartAgentCall__Inputs(this);
  }

  get outputs(): AddJoinPartAgentCall__Outputs {
    return new AddJoinPartAgentCall__Outputs(this);
  }
}

export class AddJoinPartAgentCall__Inputs {
  _call: AddJoinPartAgentCall;

  constructor(call: AddJoinPartAgentCall) {
    this._call = call;
  }

  get agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddJoinPartAgentCall__Outputs {
  _call: AddJoinPartAgentCall;

  constructor(call: AddJoinPartAgentCall) {
    this._call = call;
  }
}

export class RemoveJoinPartAgentCall extends ethereum.Call {
  get inputs(): RemoveJoinPartAgentCall__Inputs {
    return new RemoveJoinPartAgentCall__Inputs(this);
  }

  get outputs(): RemoveJoinPartAgentCall__Outputs {
    return new RemoveJoinPartAgentCall__Outputs(this);
  }
}

export class RemoveJoinPartAgentCall__Inputs {
  _call: RemoveJoinPartAgentCall;

  constructor(call: RemoveJoinPartAgentCall) {
    this._call = call;
  }

  get agent(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveJoinPartAgentCall__Outputs {
  _call: RemoveJoinPartAgentCall;

  constructor(call: RemoveJoinPartAgentCall) {
    this._call = call;
  }
}

export class RefreshRevenueCall extends ethereum.Call {
  get inputs(): RefreshRevenueCall__Inputs {
    return new RefreshRevenueCall__Inputs(this);
  }

  get outputs(): RefreshRevenueCall__Outputs {
    return new RefreshRevenueCall__Outputs(this);
  }
}

export class RefreshRevenueCall__Inputs {
  _call: RefreshRevenueCall;

  constructor(call: RefreshRevenueCall) {
    this._call = call;
  }
}

export class RefreshRevenueCall__Outputs {
  _call: RefreshRevenueCall;

  constructor(call: RefreshRevenueCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class AddMemberCall extends ethereum.Call {
  get inputs(): AddMemberCall__Inputs {
    return new AddMemberCall__Inputs(this);
  }

  get outputs(): AddMemberCall__Outputs {
    return new AddMemberCall__Outputs(this);
  }
}

export class AddMemberCall__Inputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddMemberCall__Outputs {
  _call: AddMemberCall;

  constructor(call: AddMemberCall) {
    this._call = call;
  }
}

export class PartMemberCall extends ethereum.Call {
  get inputs(): PartMemberCall__Inputs {
    return new PartMemberCall__Inputs(this);
  }

  get outputs(): PartMemberCall__Outputs {
    return new PartMemberCall__Outputs(this);
  }
}

export class PartMemberCall__Inputs {
  _call: PartMemberCall;

  constructor(call: PartMemberCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PartMemberCall__Outputs {
  _call: PartMemberCall;

  constructor(call: PartMemberCall) {
    this._call = call;
  }
}

export class AddMembersCall extends ethereum.Call {
  get inputs(): AddMembersCall__Inputs {
    return new AddMembersCall__Inputs(this);
  }

  get outputs(): AddMembersCall__Outputs {
    return new AddMembersCall__Outputs(this);
  }
}

export class AddMembersCall__Inputs {
  _call: AddMembersCall;

  constructor(call: AddMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddMembersCall__Outputs {
  _call: AddMembersCall;

  constructor(call: AddMembersCall) {
    this._call = call;
  }
}

export class PartMembersCall extends ethereum.Call {
  get inputs(): PartMembersCall__Inputs {
    return new PartMembersCall__Inputs(this);
  }

  get outputs(): PartMembersCall__Outputs {
    return new PartMembersCall__Outputs(this);
  }
}

export class PartMembersCall__Inputs {
  _call: PartMembersCall;

  constructor(call: PartMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class PartMembersCall__Outputs {
  _call: PartMembersCall;

  constructor(call: PartMembersCall) {
    this._call = call;
  }
}

export class TransferToMemberInContractCall extends ethereum.Call {
  get inputs(): TransferToMemberInContractCall__Inputs {
    return new TransferToMemberInContractCall__Inputs(this);
  }

  get outputs(): TransferToMemberInContractCall__Outputs {
    return new TransferToMemberInContractCall__Outputs(this);
  }
}

export class TransferToMemberInContractCall__Inputs {
  _call: TransferToMemberInContractCall;

  constructor(call: TransferToMemberInContractCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferToMemberInContractCall__Outputs {
  _call: TransferToMemberInContractCall;

  constructor(call: TransferToMemberInContractCall) {
    this._call = call;
  }
}

export class TransferWithinContractCall extends ethereum.Call {
  get inputs(): TransferWithinContractCall__Inputs {
    return new TransferWithinContractCall__Inputs(this);
  }

  get outputs(): TransferWithinContractCall__Outputs {
    return new TransferWithinContractCall__Outputs(this);
  }
}

export class TransferWithinContractCall__Inputs {
  _call: TransferWithinContractCall;

  constructor(call: TransferWithinContractCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferWithinContractCall__Outputs {
  _call: TransferWithinContractCall;

  constructor(call: TransferWithinContractCall) {
    this._call = call;
  }
}

export class WithdrawMembersCall extends ethereum.Call {
  get inputs(): WithdrawMembersCall__Inputs {
    return new WithdrawMembersCall__Inputs(this);
  }

  get outputs(): WithdrawMembersCall__Outputs {
    return new WithdrawMembersCall__Outputs(this);
  }
}

export class WithdrawMembersCall__Inputs {
  _call: WithdrawMembersCall;

  constructor(call: WithdrawMembersCall) {
    this._call = call;
  }

  get members(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawMembersCall__Outputs {
  _call: WithdrawMembersCall;

  constructor(call: WithdrawMembersCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllCall extends ethereum.Call {
  get inputs(): WithdrawAllCall__Inputs {
    return new WithdrawAllCall__Inputs(this);
  }

  get outputs(): WithdrawAllCall__Outputs {
    return new WithdrawAllCall__Outputs(this);
  }
}

export class WithdrawAllCall__Inputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawAllCall__Outputs {
  _call: WithdrawAllCall;

  constructor(call: WithdrawAllCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllToCall extends ethereum.Call {
  get inputs(): WithdrawAllToCall__Inputs {
    return new WithdrawAllToCall__Inputs(this);
  }

  get outputs(): WithdrawAllToCall__Outputs {
    return new WithdrawAllToCall__Outputs(this);
  }
}

export class WithdrawAllToCall__Inputs {
  _call: WithdrawAllToCall;

  constructor(call: WithdrawAllToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class WithdrawAllToCall__Outputs {
  _call: WithdrawAllToCall;

  constructor(call: WithdrawAllToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawToCall extends ethereum.Call {
  get inputs(): WithdrawToCall__Inputs {
    return new WithdrawToCall__Inputs(this);
  }

  get outputs(): WithdrawToCall__Outputs {
    return new WithdrawToCall__Outputs(this);
  }
}

export class WithdrawToCall__Inputs {
  _call: WithdrawToCall;

  constructor(call: WithdrawToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class WithdrawToCall__Outputs {
  _call: WithdrawToCall;

  constructor(call: WithdrawToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawAllToSignedCall extends ethereum.Call {
  get inputs(): WithdrawAllToSignedCall__Inputs {
    return new WithdrawAllToSignedCall__Inputs(this);
  }

  get outputs(): WithdrawAllToSignedCall__Outputs {
    return new WithdrawAllToSignedCall__Outputs(this);
  }
}

export class WithdrawAllToSignedCall__Inputs {
  _call: WithdrawAllToSignedCall;

  constructor(call: WithdrawAllToSignedCall) {
    this._call = call;
  }

  get fromSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class WithdrawAllToSignedCall__Outputs {
  _call: WithdrawAllToSignedCall;

  constructor(call: WithdrawAllToSignedCall) {
    this._call = call;
  }

  get withdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WithdrawToSignedCall extends ethereum.Call {
  get inputs(): WithdrawToSignedCall__Inputs {
    return new WithdrawToSignedCall__Inputs(this);
  }

  get outputs(): WithdrawToSignedCall__Outputs {
    return new WithdrawToSignedCall__Outputs(this);
  }
}

export class WithdrawToSignedCall__Inputs {
  _call: WithdrawToSignedCall;

  constructor(call: WithdrawToSignedCall) {
    this._call = call;
  }

  get fromSigner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sendToMainnet(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get signature(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class WithdrawToSignedCall__Outputs {
  _call: WithdrawToSignedCall;

  constructor(call: WithdrawToSignedCall) {
    this._call = call;
  }

  get withdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}
