/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC777JoinPolicyInterface extends ethers.utils.Interface {
  functions: {
    "TOKENS_RECIPIENT_INTERFACE_HASH()": FunctionFragment;
    "TOKENS_SENDER_INTERFACE_HASH()": FunctionFragment;
    "balances(address)": FunctionFragment;
    "canImplementInterfaceForAddress(bytes32,address)": FunctionFragment;
    "delegatedAccessRegistry()": FunctionFragment;
    "depositStake(uint256)": FunctionFragment;
    "minRequiredBalance()": FunctionFragment;
    "permissions(uint256)": FunctionFragment;
    "requestDelegatedJoin()": FunctionFragment;
    "requestJoin()": FunctionFragment;
    "stakingEnabled()": FunctionFragment;
    "streamId()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "tokensReceived(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "tokensToSend(address,address,address,uint256,bytes,bytes)": FunctionFragment;
    "withdrawStake(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKENS_RECIPIENT_INTERFACE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKENS_SENDER_INTERFACE_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canImplementInterfaceForAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedAccessRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minRequiredBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestDelegatedJoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestJoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "streamId", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensToSend",
    values: [string, string, string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKENS_RECIPIENT_INTERFACE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKENS_SENDER_INTERFACE_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canImplementInterfaceForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAccessRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRequiredBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestDelegatedJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestJoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "streamId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensToSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;

  events: {
    "Accepted(address,address)": EventFragment;
    "Revoked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export class ERC777JoinPolicy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC777JoinPolicyInterface;

  functions: {
    TOKENS_RECIPIENT_INTERFACE_HASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "TOKENS_RECIPIENT_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    TOKENS_SENDER_INTERFACE_HASH(overrides?: CallOverrides): Promise<[string]>;

    "TOKENS_SENDER_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    balances(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    delegatedAccessRegistry(overrides?: CallOverrides): Promise<[string]>;

    "delegatedAccessRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    depositStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositStake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minRequiredBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minRequiredBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    permissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "permissions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    requestDelegatedJoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestDelegatedJoin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestJoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestJoin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    "stakingEnabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    streamId(overrides?: CallOverrides): Promise<[string]>;

    "streamId()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "tokenId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawStake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>;

  "TOKENS_RECIPIENT_INTERFACE_HASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  TOKENS_SENDER_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>;

  "TOKENS_SENDER_INTERFACE_HASH()"(overrides?: CallOverrides): Promise<string>;

  balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canImplementInterfaceForAddress(
    interfaceHash: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "canImplementInterfaceForAddress(bytes32,address)"(
    interfaceHash: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<string>;

  delegatedAccessRegistry(overrides?: CallOverrides): Promise<string>;

  "delegatedAccessRegistry()"(overrides?: CallOverrides): Promise<string>;

  depositStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositStake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minRequiredBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "minRequiredBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  permissions(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "permissions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  requestDelegatedJoin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestDelegatedJoin()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestJoin(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestJoin()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingEnabled(overrides?: CallOverrides): Promise<boolean>;

  "stakingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

  streamId(overrides?: CallOverrides): Promise<string>;

  "streamId()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

  tokensReceived(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tokensReceived(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokensToSend(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tokensToSend(address,address,address,uint256,bytes,bytes)"(
    operator: string,
    from: string,
    to: string,
    amount: BigNumberish,
    userData: BytesLike,
    operatorData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawStake(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    TOKENS_RECIPIENT_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>;

    "TOKENS_RECIPIENT_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    TOKENS_SENDER_INTERFACE_HASH(overrides?: CallOverrides): Promise<string>;

    "TOKENS_SENDER_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<string>;

    delegatedAccessRegistry(overrides?: CallOverrides): Promise<string>;

    "delegatedAccessRegistry()"(overrides?: CallOverrides): Promise<string>;

    depositStake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositStake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    minRequiredBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "minRequiredBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    permissions(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "permissions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    requestDelegatedJoin(overrides?: CallOverrides): Promise<void>;

    "requestDelegatedJoin()"(overrides?: CallOverrides): Promise<void>;

    requestJoin(overrides?: CallOverrides): Promise<void>;

    "requestJoin()"(overrides?: CallOverrides): Promise<void>;

    stakingEnabled(overrides?: CallOverrides): Promise<boolean>;

    "stakingEnabled()"(overrides?: CallOverrides): Promise<boolean>;

    streamId(overrides?: CallOverrides): Promise<string>;

    "streamId()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawStake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawStake(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Accepted(
      mainWallet: string | null,
      delegatedWallet: null
    ): TypedEventFilter<
      [string, string],
      { mainWallet: string; delegatedWallet: string }
    >;

    Revoked(
      mainWallet: string | null,
      delegatedWallet: null
    ): TypedEventFilter<
      [string, string],
      { mainWallet: string; delegatedWallet: string }
    >;
  };

  estimateGas: {
    TOKENS_RECIPIENT_INTERFACE_HASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TOKENS_RECIPIENT_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    TOKENS_SENDER_INTERFACE_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKENS_SENDER_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delegatedAccessRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "delegatedAccessRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositStake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minRequiredBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "minRequiredBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    permissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "permissions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestDelegatedJoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestDelegatedJoin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestJoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestJoin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingEnabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    streamId(overrides?: CallOverrides): Promise<BigNumber>;

    "streamId()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenId()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawStake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKENS_RECIPIENT_INTERFACE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKENS_RECIPIENT_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKENS_SENDER_INTERFACE_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKENS_SENDER_INTERFACE_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canImplementInterfaceForAddress(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canImplementInterfaceForAddress(bytes32,address)"(
      interfaceHash: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedAccessRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegatedAccessRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositStake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minRequiredBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minRequiredBalance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permissions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestDelegatedJoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestDelegatedJoin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestJoin(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestJoin()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakingEnabled()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    streamId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "streamId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokensReceived(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tokensReceived(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokensToSend(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tokensToSend(address,address,address,uint256,bytes,bytes)"(
      operator: string,
      from: string,
      to: string,
      amount: BigNumberish,
      userData: BytesLike,
      operatorData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawStake(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
