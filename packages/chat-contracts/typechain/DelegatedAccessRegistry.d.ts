/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface DelegatedAccessRegistryInterface extends ethers.utils.Interface {
  functions: {
    "AUTHORIZE_CHALLENGE_TYPE()": FunctionFragment;
    "REVOKE_CHALLENGE_TYPE()": FunctionFragment;
    "areDelegatedWallets(address[])": FunctionFragment;
    "areMainWallets(address[])": FunctionFragment;
    "areWalletsKnown(address[])": FunctionFragment;
    "authorize(address,bytes)": FunctionFragment;
    "getDelegatedWalletFor(address)": FunctionFragment;
    "getMainWalletFor(address)": FunctionFragment;
    "isAuthorized(address)": FunctionFragment;
    "isDelegatedWallet(address)": FunctionFragment;
    "isMainWallet(address)": FunctionFragment;
    "isUserAuthorized(address,address)": FunctionFragment;
    "isWalletKnown(address)": FunctionFragment;
    "mainToDelegatedWallets(address)": FunctionFragment;
    "mainWallets(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revoke(address,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AUTHORIZE_CHALLENGE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVOKE_CHALLENGE_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "areDelegatedWallets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "areMainWallets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "areWalletsKnown",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "authorize",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedWalletFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainWalletFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegatedWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isMainWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserAuthorized",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletKnown",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mainToDelegatedWallets",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "mainWallets", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "AUTHORIZE_CHALLENGE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVOKE_CHALLENGE_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areDelegatedWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areMainWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areWalletsKnown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authorize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedWalletFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainWalletFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegatedWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMainWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isUserAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletKnown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainToDelegatedWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Authorized(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Revoked(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Authorized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export class DelegatedAccessRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DelegatedAccessRegistryInterface;

  functions: {
    AUTHORIZE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "AUTHORIZE_CHALLENGE_TYPE()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    REVOKE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "REVOKE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    areDelegatedWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    "areDelegatedWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    areMainWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    "areMainWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    areWalletsKnown(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    "areWalletsKnown(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<[boolean[]]>;

    authorize(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "authorize(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getDelegatedWalletFor(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDelegatedWalletFor(address)"(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMainWalletFor(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getMainWalletFor(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAuthorized(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isAuthorized(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isDelegatedWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isDelegatedWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMainWallet(wallet: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isMainWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUserAuthorized(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isUserAuthorized(address,address)"(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWalletKnown(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isWalletKnown(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainToDelegatedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "mainToDelegatedWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    mainWallets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "mainWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "revoke(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AUTHORIZE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  "AUTHORIZE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

  REVOKE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

  "REVOKE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

  areDelegatedWallets(
    queryWallets: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "areDelegatedWallets(address[])"(
    queryWallets: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  areMainWallets(
    queryWallets: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "areMainWallets(address[])"(
    queryWallets: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  areWalletsKnown(
    queryWallets: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  "areWalletsKnown(address[])"(
    queryWallets: string[],
    overrides?: CallOverrides
  ): Promise<boolean[]>;

  authorize(
    delegatedUser_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "authorize(address,bytes)"(
    delegatedUser_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getDelegatedWalletFor(
    mainUser_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDelegatedWalletFor(address)"(
    mainUser_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMainWalletFor(
    delegatedUser_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMainWalletFor(address)"(
    delegatedUser_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  isAuthorized(
    delegatedUser_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isAuthorized(address)"(
    delegatedUser_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isDelegatedWallet(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isDelegatedWallet(address)"(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMainWallet(wallet: string, overrides?: CallOverrides): Promise<boolean>;

  "isMainWallet(address)"(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUserAuthorized(
    mainUser_: string,
    delegatedUser_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isUserAuthorized(address,address)"(
    mainUser_: string,
    delegatedUser_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWalletKnown(wallet: string, overrides?: CallOverrides): Promise<boolean>;

  "isWalletKnown(address)"(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainToDelegatedWallets(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "mainToDelegatedWallets(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  mainWallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "mainWallets(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    delegatedUser_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "revoke(address,bytes)"(
    delegatedUser_: string,
    signature_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AUTHORIZE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    "AUTHORIZE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    "REVOKE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

    areDelegatedWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "areDelegatedWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    areMainWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "areMainWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    areWalletsKnown(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    "areWalletsKnown(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<boolean[]>;

    authorize(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "authorize(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getDelegatedWalletFor(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDelegatedWalletFor(address)"(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMainWalletFor(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMainWalletFor(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    isAuthorized(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isAuthorized(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isDelegatedWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isDelegatedWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMainWallet(wallet: string, overrides?: CallOverrides): Promise<boolean>;

    "isMainWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUserAuthorized(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isUserAuthorized(address,address)"(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWalletKnown(wallet: string, overrides?: CallOverrides): Promise<boolean>;

    "isWalletKnown(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainToDelegatedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "mainToDelegatedWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    mainWallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "mainWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revoke(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "revoke(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Authorized(
      mainWallet: string | null,
      delegatedWallet: null
    ): TypedEventFilter<
      [string, string],
      { mainWallet: string; delegatedWallet: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Revoked(
      mainWallet: string | null,
      delegatedWallet: null
    ): TypedEventFilter<
      [string, string],
      { mainWallet: string; delegatedWallet: string }
    >;
  };

  estimateGas: {
    AUTHORIZE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    "AUTHORIZE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

    REVOKE_CHALLENGE_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    "REVOKE_CHALLENGE_TYPE()"(overrides?: CallOverrides): Promise<BigNumber>;

    areDelegatedWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "areDelegatedWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    areMainWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "areMainWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    areWalletsKnown(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "areWalletsKnown(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authorize(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "authorize(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getDelegatedWalletFor(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelegatedWalletFor(address)"(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainWalletFor(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMainWalletFor(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAuthorized(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isAuthorized(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDelegatedWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isDelegatedWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMainWallet(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMainWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUserAuthorized(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isUserAuthorized(address,address)"(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWalletKnown(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isWalletKnown(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainToDelegatedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mainToDelegatedWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainWallets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "mainWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "revoke(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AUTHORIZE_CHALLENGE_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "AUTHORIZE_CHALLENGE_TYPE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVOKE_CHALLENGE_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "REVOKE_CHALLENGE_TYPE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    areDelegatedWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "areDelegatedWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    areMainWallets(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "areMainWallets(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    areWalletsKnown(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "areWalletsKnown(address[])"(
      queryWallets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorize(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "authorize(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getDelegatedWalletFor(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelegatedWalletFor(address)"(
      mainUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainWalletFor(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMainWalletFor(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAuthorized(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isAuthorized(address)"(
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDelegatedWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isDelegatedWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMainWallet(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMainWallet(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUserAuthorized(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUserAuthorized(address,address)"(
      mainUser_: string,
      delegatedUser_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWalletKnown(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isWalletKnown(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainToDelegatedWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mainToDelegatedWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainWallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mainWallets(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "revoke(address,bytes)"(
      delegatedUser_: string,
      signature_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
