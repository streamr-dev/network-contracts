/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ENSCacheInterface extends ethers.utils.Interface {
  functions: {
    "cancelRequest(bytes32,uint256,bytes4,uint256)": FunctionFragment;
    "fulfillENSOwner(bytes32,bytes32)": FunctionFragment;
    "getChainlinkToken()": FunctionFragment;
    "jobId()": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "owners(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestENSOwner(string)": FunctionFragment;
    "requestENSOwnerAndCreateStream(string,string,string,address)": FunctionFragment;
    "resetCacheForENSName(string)": FunctionFragment;
    "resetCacheForMyENSName(string)": FunctionFragment;
    "setChainlinkJobId(string)": FunctionFragment;
    "setChainlinkTokenAddress(address)": FunctionFragment;
    "setOracleAddress(address)": FunctionFragment;
    "setStreamRegistry(address)": FunctionFragment;
    "tempENSnames(bytes32)": FunctionFragment;
    "tempIdPaths(bytes32)": FunctionFragment;
    "tempMetadatas(bytes32)": FunctionFragment;
    "tempRequestorAddress(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawLink()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelRequest",
    values: [BytesLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfillENSOwner",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainlinkToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owners", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestENSOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestENSOwnerAndCreateStream",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "resetCacheForENSName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "resetCacheForMyENSName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkJobId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setChainlinkTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setStreamRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tempENSnames",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tempIdPaths",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tempMetadatas",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tempRequestorAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLink",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fulfillENSOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainlinkToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestENSOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestENSOwnerAndCreateStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetCacheForENSName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetCacheForMyENSName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkJobId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainlinkTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStreamRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempENSnames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempIdPaths",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempMetadatas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tempRequestorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLink",
    data: BytesLike
  ): Result;

  events: {
    "ChainlinkCancelled(bytes32)": EventFragment;
    "ChainlinkFulfilled(bytes32)": EventFragment;
    "ChainlinkRequested(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChainlinkCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChainlinkRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ENSCache extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ENSCacheInterface;

  functions: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fulfillENSOwner(bytes32,bytes32)"(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<[string]>;

    "getChainlinkToken()"(overrides?: CallOverrides): Promise<[string]>;

    jobId(overrides?: CallOverrides): Promise<[string]>;

    "jobId()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    owners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "owners(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestENSOwner(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestENSOwner(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestENSOwnerAndCreateStream(string,string,string,address)"(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetCacheForENSName(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resetCacheForENSName(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetCacheForMyENSName(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resetCacheForMyENSName(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setChainlinkJobId(string)"(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setChainlinkTokenAddress(address)"(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracleAddress(address)"(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setStreamRegistry(address)"(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tempENSnames(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "tempENSnames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "tempIdPaths(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tempMetadatas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tempMetadatas(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tempRequestorAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawLink()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelRequest(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelRequest(bytes32,uint256,bytes4,uint256)"(
    _requestId: BytesLike,
    _payment: BigNumberish,
    _callbackFunctionId: BytesLike,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfillENSOwner(
    requestId: BytesLike,
    owneraddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fulfillENSOwner(bytes32,bytes32)"(
    requestId: BytesLike,
    owneraddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getChainlinkToken(overrides?: CallOverrides): Promise<string>;

  "getChainlinkToken()"(overrides?: CallOverrides): Promise<string>;

  jobId(overrides?: CallOverrides): Promise<string>;

  "jobId()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  owners(arg0: string, overrides?: CallOverrides): Promise<string>;

  "owners(string)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestENSOwner(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestENSOwner(string)"(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestENSOwnerAndCreateStream(
    ensName: string,
    streamIdPath: string,
    metadataJsonString: string,
    requestorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestENSOwnerAndCreateStream(string,string,string,address)"(
    ensName: string,
    streamIdPath: string,
    metadataJsonString: string,
    requestorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetCacheForENSName(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resetCacheForENSName(string)"(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetCacheForMyENSName(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resetCacheForMyENSName(string)"(
    ensName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkJobId(
    chainlinkJobId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setChainlinkJobId(string)"(
    chainlinkJobId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setChainlinkTokenAddress(
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setChainlinkTokenAddress(address)"(
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleAddress(
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracleAddress(address)"(
    oracleAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStreamRegistry(
    streamRegistryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setStreamRegistry(address)"(
    streamRegistryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tempENSnames(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "tempENSnames(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "tempIdPaths(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  tempMetadatas(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "tempMetadatas(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  tempRequestorAddress(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "tempRequestorAddress(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawLink(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawLink()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "fulfillENSOwner(bytes32,bytes32)"(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainlinkToken(overrides?: CallOverrides): Promise<string>;

    "getChainlinkToken()"(overrides?: CallOverrides): Promise<string>;

    jobId(overrides?: CallOverrides): Promise<string>;

    "jobId()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    owners(arg0: string, overrides?: CallOverrides): Promise<string>;

    "owners(string)"(arg0: string, overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    requestENSOwner(ensName: string, overrides?: CallOverrides): Promise<void>;

    "requestENSOwner(string)"(
      ensName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestENSOwnerAndCreateStream(string,string,string,address)"(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resetCacheForENSName(
      ensName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "resetCacheForENSName(string)"(
      ensName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resetCacheForMyENSName(
      ensName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "resetCacheForMyENSName(string)"(
      ensName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChainlinkJobId(string)"(
      chainlinkJobId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setChainlinkTokenAddress(address)"(
      _link: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleAddress(address)"(
      oracleAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setStreamRegistry(address)"(
      streamRegistryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tempENSnames(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "tempENSnames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "tempIdPaths(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tempMetadatas(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "tempMetadatas(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "tempRequestorAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawLink(overrides?: CallOverrides): Promise<void>;

    "withdrawLink()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    ChainlinkCancelled(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkFulfilled(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    ChainlinkRequested(
      id: BytesLike | null
    ): TypedEventFilter<[string], { id: string }>;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fulfillENSOwner(bytes32,bytes32)"(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getChainlinkToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainlinkToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    jobId(overrides?: CallOverrides): Promise<BigNumber>;

    "jobId()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "owners(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestENSOwner(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestENSOwner(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestENSOwnerAndCreateStream(string,string,string,address)"(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetCacheForENSName(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resetCacheForENSName(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetCacheForMyENSName(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resetCacheForMyENSName(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setChainlinkJobId(string)"(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setChainlinkTokenAddress(address)"(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracleAddress(address)"(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setStreamRegistry(address)"(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tempENSnames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tempENSnames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tempIdPaths(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "tempIdPaths(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tempMetadatas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tempMetadatas(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tempRequestorAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawLink()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelRequest(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelRequest(bytes32,uint256,bytes4,uint256)"(
      _requestId: BytesLike,
      _payment: BigNumberish,
      _callbackFunctionId: BytesLike,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfillENSOwner(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fulfillENSOwner(bytes32,bytes32)"(
      requestId: BytesLike,
      owneraddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getChainlinkToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainlinkToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jobId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "jobId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "owners(string)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestENSOwner(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestENSOwner(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestENSOwnerAndCreateStream(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestENSOwnerAndCreateStream(string,string,string,address)"(
      ensName: string,
      streamIdPath: string,
      metadataJsonString: string,
      requestorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetCacheForENSName(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resetCacheForENSName(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetCacheForMyENSName(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resetCacheForMyENSName(string)"(
      ensName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkJobId(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setChainlinkJobId(string)"(
      chainlinkJobId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setChainlinkTokenAddress(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setChainlinkTokenAddress(address)"(
      _link: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleAddress(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracleAddress(address)"(
      oracleAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStreamRegistry(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setStreamRegistry(address)"(
      streamRegistryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tempENSnames(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tempENSnames(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tempIdPaths(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tempIdPaths(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tempMetadatas(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tempMetadatas(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tempRequestorAddress(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tempRequestorAddress(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawLink(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawLink()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
