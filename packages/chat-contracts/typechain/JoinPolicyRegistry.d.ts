/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface JoinPolicyRegistryInterface extends ethers.utils.Interface {
  functions: {
    "canBeRegistered(address,string,uint256,bool)": FunctionFragment;
    "getPolicy(address,uint256,string,bool)": FunctionFragment;
    "policies(address,uint256,string,bool)": FunctionFragment;
    "register(address,string,address,uint256,bool)": FunctionFragment;
    "registeredPoliciesById(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "canBeRegistered",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredPoliciesById",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "canBeRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredPoliciesById",
    data: BytesLike
  ): Result;

  events: {
    "Registered(address,string,bool,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Registered"): EventFragment;
}

export class JoinPolicyRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: JoinPolicyRegistryInterface;

  functions: {
    canBeRegistered(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { policyId: string }>;

    "canBeRegistered(address,string,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { policyId: string }>;

    getPolicy(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPolicy(address,uint256,string,bool)"(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    policies(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "policies(address,uint256,string,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    register(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "register(address,string,address,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registeredPoliciesById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "registeredPoliciesById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  canBeRegistered(
    tokenAddress_: string,
    streamId_: string,
    tokenId_: BigNumberish,
    stakingEnabled_: boolean,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { policyId: string }>;

  "canBeRegistered(address,string,uint256,bool)"(
    tokenAddress_: string,
    streamId_: string,
    tokenId_: BigNumberish,
    stakingEnabled_: boolean,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { policyId: string }>;

  getPolicy(
    tokenAddress_: string,
    tokenId_: BigNumberish,
    streamId_: string,
    stakingEnabled_: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPolicy(address,uint256,string,bool)"(
    tokenAddress_: string,
    tokenId_: BigNumberish,
    streamId_: string,
    stakingEnabled_: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  policies(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  "policies(address,uint256,string,bool)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    arg3: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  register(
    tokenAddress_: string,
    streamId_: string,
    deployedPolicy: string,
    tokenId_: BigNumberish,
    stakingEnabled_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "register(address,string,address,uint256,bool)"(
    tokenAddress_: string,
    streamId_: string,
    deployedPolicy: string,
    tokenId_: BigNumberish,
    stakingEnabled_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registeredPoliciesById(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "registeredPoliciesById(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    canBeRegistered(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { policyId: string }>;

    "canBeRegistered(address,string,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { policyId: string }>;

    getPolicy(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPolicy(address,uint256,string,bool)"(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    policies(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "policies(address,uint256,string,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    register(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(address,string,address,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    registeredPoliciesById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "registeredPoliciesById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    Registered(
      tokenAddress: string | null,
      streamId: string | null,
      isStakingEnabled: boolean | null,
      policyAddress: null,
      policyId: null
    ): TypedEventFilter<
      [string, string, boolean, string, string],
      {
        tokenAddress: string;
        streamId: string;
        isStakingEnabled: boolean;
        policyAddress: string;
        policyId: string;
      }
    >;
  };

  estimateGas: {
    canBeRegistered(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "canBeRegistered(address,string,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPolicy(address,uint256,string,bool)"(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    policies(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "policies(address,uint256,string,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "register(address,string,address,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registeredPoliciesById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "registeredPoliciesById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canBeRegistered(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "canBeRegistered(address,string,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPolicy(address,uint256,string,bool)"(
      tokenAddress_: string,
      tokenId_: BigNumberish,
      streamId_: string,
      stakingEnabled_: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    policies(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "policies(address,uint256,string,bool)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      arg3: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "register(address,string,address,uint256,bool)"(
      tokenAddress_: string,
      streamId_: string,
      deployedPolicy: string,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registeredPoliciesById(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "registeredPoliciesById(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
