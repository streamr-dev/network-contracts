/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ERC721PolicyDeployerInterface extends ethers.utils.Interface {
  functions: {
    "delegatedAccessRegistryAddress()": FunctionFragment;
    "deploy(address,string,uint256,uint256,bool,uint8[])": FunctionFragment;
    "registry()": FunctionFragment;
    "streamRegistry()": FunctionFragment;
    "streamRegistryAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "delegatedAccessRegistryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "streamRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "streamRegistryAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "delegatedAccessRegistryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "streamRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "streamRegistryAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class ERC721PolicyDeployer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ERC721PolicyDeployerInterface;

  functions: {
    delegatedAccessRegistryAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "delegatedAccessRegistryAddress()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    deploy(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "deploy(address,string,uint256,uint256,bool,uint8[])"(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    "registry()"(overrides?: CallOverrides): Promise<[string]>;

    streamRegistry(overrides?: CallOverrides): Promise<[string]>;

    "streamRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    streamRegistryAddress(overrides?: CallOverrides): Promise<[string]>;

    "streamRegistryAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  delegatedAccessRegistryAddress(overrides?: CallOverrides): Promise<string>;

  "delegatedAccessRegistryAddress()"(
    overrides?: CallOverrides
  ): Promise<string>;

  deploy(
    tokenAddress: string,
    streamId_: string,
    arg2: BigNumberish,
    tokenId_: BigNumberish,
    stakingEnabled_: boolean,
    defaultPermissions_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "deploy(address,string,uint256,uint256,bool,uint8[])"(
    tokenAddress: string,
    streamId_: string,
    arg2: BigNumberish,
    tokenId_: BigNumberish,
    stakingEnabled_: boolean,
    defaultPermissions_: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  "registry()"(overrides?: CallOverrides): Promise<string>;

  streamRegistry(overrides?: CallOverrides): Promise<string>;

  "streamRegistry()"(overrides?: CallOverrides): Promise<string>;

  streamRegistryAddress(overrides?: CallOverrides): Promise<string>;

  "streamRegistryAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    delegatedAccessRegistryAddress(overrides?: CallOverrides): Promise<string>;

    "delegatedAccessRegistryAddress()"(
      overrides?: CallOverrides
    ): Promise<string>;

    deploy(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "deploy(address,string,uint256,uint256,bool,uint8[])"(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    "registry()"(overrides?: CallOverrides): Promise<string>;

    streamRegistry(overrides?: CallOverrides): Promise<string>;

    "streamRegistry()"(overrides?: CallOverrides): Promise<string>;

    streamRegistryAddress(overrides?: CallOverrides): Promise<string>;

    "streamRegistryAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    delegatedAccessRegistryAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delegatedAccessRegistryAddress()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "deploy(address,string,uint256,uint256,bool,uint8[])"(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    "registry()"(overrides?: CallOverrides): Promise<BigNumber>;

    streamRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "streamRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    streamRegistryAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "streamRegistryAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    delegatedAccessRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delegatedAccessRegistryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "deploy(address,string,uint256,uint256,bool,uint8[])"(
      tokenAddress: string,
      streamId_: string,
      arg2: BigNumberish,
      tokenId_: BigNumberish,
      stakingEnabled_: boolean,
      defaultPermissions_: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    streamRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "streamRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    streamRegistryAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "streamRegistryAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
