/* eslint-disable no-console */
import { JsonRpcProvider } from "@ethersproject/providers"
import { Wallet } from "@ethersproject/wallet"
import { HubEnvDeployer } from "./HubEnvDeployer"
import { projects } from "./projects"
import { StreamrEnvDeployer } from "./StreamrEnvDeployer"

// hardhat node mockchain (first private key from testrpc mnemonic)
const key = "0x5e98cce00cff5dea6b454889f359a4ec06b9fa6b88e9d69b86de8e1c81887da0"
const url = "http://127.0.0.1:8545"

// hardhat node mockchain (first priv key auto-generated by hardhat node)
// const key = "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80"
// const url = "http://127.0.0.1:8547"

// sidechain key preloaded with ETH (from docker-dev-init)
// const key = "0x2cd9855d17e01ce041953829398af7e48b24ece04ff9d0e183414de54dc52285"
// const url = "http://10.200.10.1:8546"

const provider = new JsonRpcProvider(url)

async function main() {
    for (let i = 0; i < 5; i++) {
        try {
            console.log("Checking if chain node is up...")
            await provider.getBlockNumber()
            break
        } catch (e) {
            console.log("Waiting for chain node to start up...")
            await new Promise((resolve) => setTimeout(resolve, 3000))
        }
    }
    console.log("Chain node is up, deploying contracts...")
    await deploy()

    // set block timestamp to wall clock time
    await provider.send("evm_mine", [ Math.ceil(Date.now() / 1000) ])
}

async function deploy() {
    const deployerWallet = new Wallet(key, provider)
    const streamrEnvDeployer = new StreamrEnvDeployer(key, url)

    await streamrEnvDeployer.deployToken()

    await streamrEnvDeployer.deployEnvironment({ deployToken: false })
    await streamrEnvDeployer.createFundStakeSponsorshipAndOperator()
    await streamrEnvDeployer.registerEnsName("streamrtest", new Wallet(key))

    console.log("Deploying Hub contracts...")
    const hubDeployer = new HubEnvDeployer(key, url, streamrEnvDeployer.addresses.StreamRegistry, 1337)
    await hubDeployer.deployCoreContracts(streamrEnvDeployer.addresses.DATA)

    console.log("\n\n")
    console.log(`Admin wallet: address: ${deployerWallet.address} (private key: ${deployerWallet.privateKey})`)

    console.log(`Adding ${projects.length} projects to ProjectRegistryV1`)
    for (const p of projects) {
        await hubDeployer.contracts.projectRegistryV1.createProject(
            p.id,
            p.chainIds,
            p.paymentDetails,
            p.streams,
            p.minimumSubscriptionSeconds,
            p.isPublicPurchable,
            p.metadata
        )
        console.log('Project created (id: %s)', p.id)
    }

    console.log("Wallets with preloaded DATA:")
    for (const wallet of streamrEnvDeployer.preloadedDATAWallets) {
        console.log(`- address: ${wallet.address} (private key: ${wallet.privateKey})`)
    }

    // TODO move this e.g. to deploySponsorshipFactory() when deterministic contract address are in use (ETH-807)
    // Currently all transactions affect the contract address calculation, i.e. some contract addresses change
    // (relative to what's in @streamr/config) if this transaction is executed inside deploySponsorshipFactory()
    await (await streamrEnvDeployer.contracts.streamrConfig.setMinimumDelegationSeconds(1)).wait()

    const contractAddresses = {
        ...streamrEnvDeployer.addresses,
        ...hubDeployer.addresses
    }
    const addressesJson = JSON.stringify(contractAddresses, null, 4)

    console.log(addressesJson)
}

main().catch((error) => {
    console.error(error)
    process.exit(1)
})
