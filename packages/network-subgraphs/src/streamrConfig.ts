import { BigInt, log } from '@graphprotocol/graph-ts'
import { ConfigChanged } from '../generated/StreamrConfig/StreamrConfig'
import { loadOrCreateNetwork } from './helpers'
import { Network } from '../generated/schema'

export function handleConfigChanged(event: ConfigChanged): void {
    let streamrConfigAddress = event.address.toHexString()
    let key = event.params.key.toHexString()
    let newValue = event.params.newValue
    let newAddress = event.params.newAddress.toHexString()

    log.info('handleConfigChanged: streamrConfigAddress={} key={} newValue={} newAddress={} blockNumber={}',
        [streamrConfigAddress, key, newValue.toString(), newAddress, event.block.number.toString()])

    let network = loadOrCreateNetwork()

    // @dev generated by scripts/generateConfigKeys and direcly copied here since it's not possible to import it in assemblyscript
    const slashingFractionKey = "0x1244ece3f5099e14b39eb81a51e3cd18b792bc2a2335d9222b07f97c2fe13326"
    const earlyLeaverPenaltyWeiKey = "0xb933e6a7e59ff365eefd7d3f18ba7398e336d14d1df87f8ee7f932fc83aa8a43"
    const minimumSelfDelegationFractionKey = "0x1ca17fd4cbd0ed96d8c8d6e448224aca588f1100d83e33d41fe02b3f9587e822"
    const minimumDelegationWeiKey = "0x553ed1459cb5cb95b7e1ac7038152e1a42a4a71c491099314cb28dfccffbe4bb"
    const maxPenaltyPeriodSecondsKey = "0xaa2e1f84e76f4f4566be4803df58837ff38f958e965ed541c19e070178eda6b0"
    const maxQueueSecondsKey = "0x7116cc401a9e017064c992ba26c904653dc76fd24f7b149186e09f3ed5c9e12f"
    const maxAllowedEarningsFractionKey = "0x224e4d5d31e74807a08b22ea7ba007552b9a83e00e3ef6611e87d7407e810aed"
    const fishermanRewardFractionKey = "0x93b434a6c1530234d09d4773c9b3543f311843d64e72e30db78f4c03f18fad90"
    const protocolFeeFractionKey = "0x658e02ffcdcbe031a8cdfc3dced88b9f02280471f2739261ee2feb878fc4ae08"
    const protocolFeeBeneficiaryKey = "0x4551acd9ae3431fce885a9af48a084268b6bfca1668489ef5b387dc60aee8270"
    const minEligibleVoterAgeKey = "0x9e41554f2f4045a74ec0ba7c791dbd53f48b1025c305df8be094344c9bf77e79"
    const minEligibleVoterFractionOfAllStakeKey = "0xe62835feb6e310366ea3c460919e44a29e3de3e82224a2d699d878b881a5a2fe"
    const flagReviewerCountKey = "0x7fc997eaafdcdcb53a413b2914ebc66e289dfe4cfdaf75054e2f383b31ade41f"
    const flagReviewerRewardWeiKey = "0xbbb192f31a1c6fff1ddd9f2cd914ac1439b67e834dd055c8fca847c3f1fe193f"
    const flaggerRewardWeiKey = "0xf390034ab5569994b355a6beed493dece14cb5ce7b8ba80920af8870d7ce67cc"
    const flagReviewerSelectionIterationsKey = "0x162af7a35390c58c1d2f98ffbb9c0649b0cb82c525039f6f8054854de6bf1cb1"
    const flagStakeWeiKey = "0x0e6fe500a60462b747908dd5c9ae1e09a2e694f303d530559b593440904fbcf4"
    const reviewPeriodSecondsKey = "0x0879bbdfd4829b0bf4b3e39ba584d0124ae199baf3828fa7b12037bd134b2127"
    const votingPeriodSecondsKey = "0xad3352b6848e63a27c279ee1f856066b78b9231e21e7d8e0f94da78e59ced787"
    const flagProtectionSecondsKey = "0x756d598651ef4076a5391df2a66dc0d2c3922a441e58aec133fece6d24f14c1e"
    const randomOracleKey = "0x5cb2228d128d96258c7af8606f7f829874f3d671cd3bc6b22eda4690e2625010"
    const trustedForwarderKey = "0x222cb212229f0f9bcd249029717af6845ea3d3a84f22b54e5744ac25ef224c92"
    const sponsorshipFactoryKey = "0xc963353f31d9dd12ccdc7dfcf8fd4b7e35353c5b878287ed8b3f49ad40b905b8"
    const operatorFactoryKey = "0x5358c7033ef04664a35472fe26b0f98d65bab249a257a22e7344f93baa8f72c5"
    const voterRegistryKey = "0x58254c54e86123cf819eedb7cf9d7a61ccb21b76f62320eab4f0b7d49507ad79"
    const operatorContractOnlyJoinPolicyKey = "0x38a6f03e6bd2acd4fe1e3d4e6c3860c1deef0ead9032a8c7ec7cff906d4e8e03"
    const streamRegistryAddressKey = "0x9a1da2e2aa2cee6990886343b189f55e5cde5dc6bf4330bc5c18cbfba119da57"
    const minimumDelegationSecondsKey = "0xdb586e43230e1ebdce5737a4e15eb3da19b485d51047df5232361de0b9deb607"

    if (key == slashingFractionKey) {
        network.slashingFraction = newValue
        updateMinimumStake(network)
    }
    else if (key == earlyLeaverPenaltyWeiKey) { network.earlyLeaverPenaltyWei = newValue }
    else if (key == minimumSelfDelegationFractionKey) { network.minimumSelfDelegationFraction = newValue }
    else if (key == minimumDelegationWeiKey) { network.minimumDelegationWei = newValue }
    else if (key == maxPenaltyPeriodSecondsKey) { network.maxPenaltyPeriodSeconds = newValue.toI32() }
    else if (key == maxQueueSecondsKey) { network.maxQueueSeconds = newValue.toI32() }
    else if (key == maxAllowedEarningsFractionKey) { network.maxAllowedEarningsFraction = newValue }
    else if (key == fishermanRewardFractionKey) { network.fishermanRewardFraction = newValue }
    else if (key == protocolFeeFractionKey) { network.protocolFeeFraction = newValue }
    else if (key == protocolFeeBeneficiaryKey) { network.protocolFeeBeneficiary = newAddress }
    else if (key == minEligibleVoterAgeKey) { network.minEligibleVoterAge = newValue.toI32() }
    else if (key == minEligibleVoterFractionOfAllStakeKey) { network.minEligibleVoterFractionOfAllStake = newValue }
    else if (key == flagReviewerCountKey) {
        network.flagReviewerCount = newValue.toI32()
        updateMinimumStake(network)
    }
    else if (key == flagReviewerRewardWeiKey) {
        network.flagReviewerRewardWei = newValue
        updateMinimumStake(network)
    }
    else if (key == flaggerRewardWeiKey) {
        network.flaggerRewardWei = newValue
        updateMinimumStake(network)
    }
    else if (key == flagReviewerSelectionIterationsKey) { network.flagReviewerSelectionIterations = newValue.toI32() }
    else if (key == flagStakeWeiKey) { network.flagStakeWei = newValue }
    else if (key == reviewPeriodSecondsKey) { network.reviewPeriodSeconds = newValue.toI32() }
    else if (key == votingPeriodSecondsKey) { network.votingPeriodSeconds = newValue.toI32() }
    else if (key == flagProtectionSecondsKey) { network.flagProtectionSeconds = newValue.toI32() }
    else if (key == randomOracleKey) { network.randomOracle = newAddress }
    else if (key == trustedForwarderKey) { network.trustedForwarder = newAddress }
    else if (key == sponsorshipFactoryKey) { network.sponsorshipFactory = newAddress }
    else if (key == operatorFactoryKey) { network.operatorFactory = newAddress }
    else if (key == voterRegistryKey) { network.voterRegistry = newAddress }
    else if (key == operatorContractOnlyJoinPolicyKey) { network.operatorContractOnlyJoinPolicy = newAddress }
    else if (key == streamRegistryAddressKey) { network.streamRegistryAddress = newAddress }
    else if (key == minimumDelegationSecondsKey) { network.minimumDelegationSeconds = newValue.toI32() }
    else { log.error("handleConfigChanged: unknown key={}", [key]) }
    network.save()
}

function updateMinimumStake(network: Network): void {
    let oneEther = BigInt.fromString("1000000000000000000")
    network.minimumStakeWei = oneEther
        * (network.flaggerRewardWei + BigInt.fromI32(network.flagReviewerCount) * network.flagReviewerRewardWei)
        / network.slashingFraction
}
