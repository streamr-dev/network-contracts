# @dev: frontend asked if we could give timestamps as numbers (not strings), so maybe try to use Int instead of BigInt?

######################################################################
##  NETWORK: streams, (storage) nodes
######################################################################

type _Schema_
  @fulltext(
    name: "projectSearch"
    language: en
    algorithm: rank
    include: [{ entity: "Project", fields: [{ name: "metadata" }] }]
  )

type StreamPermission @entity {
  id: ID!
  "[DEPRECATED] Ethereum address, owner of this permission; only if permission granting didn't use *forUserId functions"
  userAddress: Bytes! @deprecated(reason: "Use userId instead")
  "Ethereum address or other ID, owner of this permission"
  userId: Bytes!
  "Target stream this permission applies to"
  stream: Stream
  "Edit permission enables changing the stream's metadata"
  canEdit: Boolean
  "canDelete permission allows deleting the stream from the StreamRegistry"
  canDelete: Boolean
  "publishExpiration timestamp tells until what time this address may publish data to the stream"
  publishExpiration: BigInt
  "subscribeExpires timestamp tells until what time this address may subscribe to the stream"
  subscribeExpiration: BigInt
  "grant permission allows granting and revoking permissions to this stream"
  canGrant: Boolean
}

type Stream @entity {
  "stream ID = 'creator address'/'path' where path can be any string"
  id: ID!
  "This field has the same value as the ID field. It enables us to perform substring queries on the id field using the idAsString_contains where clause"
  idAsString: String! @index
  "Stream metadata JSON"
  metadata: String!
  "Permissions that each Ethereum address owns to this stream"
  permissions: [StreamPermission!] @derivedFrom(field: "stream")
  "Nodes the have been registered as storage nodes to this stream in the StreamStorageRegistry"
  storageNodes: [Node!] @derivedFrom(field: "storedStreams")
  "date created. This is a timestamp in seconds"
  createdAt: BigInt
  "date updated. This is a timestamp in seconds"
  updatedAt: BigInt
  sponsorships: [Sponsorship!] @derivedFrom(field: "stream")
}

type Node @entity {
  "node ID = address"
  id: ID!
  "Connection metadata, e.g. URL of the node, e.g. http://mynode.com:3000"
  metadata: String!
  "Epoch timestamp of the last time the node metadata was updated"
  lastSeen: BigInt!
  "Streams for which this node is registered as a storage node in the StreamStorageRegistry"
  storedStreams: [Stream!] # @derivedFrom(field: "storageNodes")
  # whitelisted: Boolean! # Problem: should whitelisting "create" nodes that show up in query results?
  "date created. This is a timestamp in seconds"
  createdAt: BigInt
}

# many-to-many relationship: https://thegraph.com/docs/developer/create-subgraph-hosted#many-to-many-relationships
# "more performant option" according the the docs:
# type StreamStorage @entity {
#   id: ID!
#   created: BigInt!
#   node: Node!
#   stream: Stream!
# }

############################################################
##  THE HUB: projects, marketplace, project-staking
############################################################

type ProjectPermission @entity {
  "permission id = projectId + '-' + userAddress"
  id: ID!
  "Ethereum address, owner of this permission"
  userAddress: Bytes!
  "Target project this permission applies to"
  project: Project!
  "canBuy permission enables a user to buy the project"
  canBuy: Boolean
  "canDelete permission allows deleting the project from the ProjectRegistry"
  canDelete: Boolean
  "canEdit permission enables changing the project's fields"
  canEdit: Boolean
  "canGrant permission allows granting and revoking permissions to this project"
  canGrant: Boolean
}

type ProjectPaymentDetails @entity {
  "payment details id = projectId + '-' + domainId"
  id: ID!
  "Target project this payment details applies to"
  project: Project!
  "The domainId of the chain where the project can be purchased. It's a unique id assigned by hyperlane to each chain"
  domainId: BigInt
  "Ethereum address, account where the payment is directed to for project purchases"
  beneficiary: Bytes!
  "Ethereum address, the token in which the payment goes to project beneficiary"
  pricingTokenAddress: Bytes!
  "Project price per second. This is a DATA-wei denominated amount (10^18th of DATA token)."
  pricePerSecond: BigInt
}

type ProjectSubscription @entity {
  "subscription id = projectId + '-' + subscriberAddress"
  id: ID!
  "Target project this permission applies to"
  project: Project!
  "Ethereum address, owner of this subscription"
  userAddress: Bytes!
  "Subscription expiration time. This is a timestamp in seconds"
  endTimestamp: BigInt
}

type Project @entity {
  "project id = bytes32"
  id: ID!
  "List of domain ids for the chains from which this project can be purchased"
  domainIds: [BigInt!]!
  "Payment details for the chains where the project can be purchased: mapping (uint32 => PaymentDetailsByChain)"
  paymentDetails: [ProjectPaymentDetails!]!
  "The minimum amount of seconds for which a subscription can be extended. This is a normal int value (not wei)"
  minimumSubscriptionSeconds: BigInt!
  "Subscriptions mapping (address => TimeBasedSubscription)"
  subscriptions: [ProjectSubscription!]!
  "Project metadata JSON"
  metadata: String!
  "Flags a project as being a data union, true iff 'isDataUnion' field is set to 'true' in the metadata JSON"
  isDataUnion: Boolean
  "Streams added to the project"
  streams: [String!]!
  "Permissions mapping (bytes32 => Permission)"
  permissions: [ProjectPermission!]!
  "date created. This is a timestamp in seconds"
  createdAt: BigInt
  "date updated. This is a timestamp in seconds"
  updatedAt: BigInt
  "Marketplace purchases"
  purchases: [ProjectPurchase!]!
  "Incremented/decremented when Stake/Unstake events are fired. It may not always be 1:1 with the stake (with future implementations)"
  score: BigInt!
  "Total tokens staked in the project by all stakers"
  stakedWei: BigInt!
  "Increases when various actions are triggered (e.g. purchase, stake, unstake). Used to generate unique ids"
  counter: Int
}

# MarketplaceV4

type ProjectPurchase @entity {
  "project purchase id = projectId + '-' + subscriberAddress + '-' + counter"
  id: ID!

  "Target project this purchase is for"
  project: Project!

  "Ethereum address, the account initiating the project purchase"
  subscriber: Bytes!

  "The amount of seconds by which the subscription is extended"
  subscriptionSeconds: BigInt!

  "The amount of tokens paid to beneficiary for project subscription"
  price: BigInt!

  "The amount of tokens paid to marketplace for project subscription"
  fee: BigInt!

  "purchase date. This is a timestamp in seconds"
  purchasedAt: BigInt
}

# ProjectStakingV1

type ProjectStakeByUser @entity {
  "stake id = projectId + '-' + userAddress"
  id: ID!

  "Target project this stake is for"
  project: Project!

  "Ethereum address, the account initiating the stake"
  user: Bytes!

  "All tokens staked by a given user"
  userStake: BigInt!
}

type ProjectStakingDayBucket @entity {
  "bucket id = projectId + '-' + date"
  id: ID!

  "Target project this stake is for"
  project: Project!

  "The day of the bucket"
  date: BigInt!

  "The amount of tokens staked when the bucket starts"
  stakeAtStart: BigInt!

  "The amount of tokens staked/unstaked on this day"
  stakeChange: BigInt!

  "The amount of tokens staked on this day"
  stakingsWei: BigInt!

  "The amount of tokens unstaked on this day"
  unstakingsWei: BigInt!
}

############################################################
##  OPERATOR TOKENOMICS: sponsoring, staking, delegating
##
##  Operators run the nodes that keep the streams humming
##  Sponsorships pay Operators for their work
##  Delegators signal their trust by delegating tokens to Operators
############################################################

type Network @entity {
  id: ID! # StreamrConfig contract address

  "Total DATA staked - slashed in all sponsorships"
  totalStake: BigInt!
  "Total DATA delegated to all operators"
  totalDelegated: BigInt!
  "Total DATA undelegated from all operators"
  totalUndelegated: BigInt!
  "The number of all Sponsorships ever created through the SponsorshipFactory"
  sponsorshipsCount: Int!
  "The number of all Sponsorships ever created through the SponsorshipFactory that are currently funded"
  fundedSponsorshipsCount: Int!
  "The number of all Operators ever created through the OperatorFactory"
  operatorsCount: Int!
  "The number of all Operators ever created through the OperatorFactory that are eligible to vote"
  eligibleVotersCount: Int!

  ## StreamrConfig values

  slashingFraction: BigInt!
  earlyLeaverPenaltyWei: BigInt!
  minimumDelegationWei: BigInt!
  minimumSelfDelegationFraction: BigInt!
  maxPenaltyPeriodSeconds: Int!
  maxQueueSeconds: Int!
  maxAllowedEarningsFraction: BigInt!
  fishermanRewardFraction: BigInt!
  protocolFeeFraction: BigInt!
  protocolFeeBeneficiary: String!
  minEligibleVoterAge: Int!
  minEligibleVoterFractionOfAllStake: BigInt!
  flagReviewerCount: Int!
  flagReviewerRewardWei: BigInt!
  flaggerRewardWei: BigInt!
  flagReviewerSelectionIterations: Int!
  flagStakeWei: BigInt!
  reviewPeriodSeconds: Int!
  votingPeriodSeconds: Int!
  flagProtectionSeconds: Int!
  randomOracle: String
  trustedForwarder: String
  sponsorshipFactory: String
  operatorFactory: String
  voterRegistry: String
  operatorContractOnlyJoinPolicy: String
  streamRegistryAddress: String
  minimumDelegationSeconds: Int!

  "Updated whenever one of flaggerRewardWei | flagReviewerCount | flagReviewerRewardWei | slashingFraction changes"
  minimumStakeWei: BigInt!
}

type Operator @entity {
  id: ID! # contract address
  stakes: [Stake!]! @derivedFrom(field: "operator")
  delegations: [Delegation!]! @derivedFrom(field: "operator")
  slashingEvents: [SlashingEvent!]! @derivedFrom(field: "operator")
  stakingEvents: [StakingEvent!]! @derivedFrom(field: "operator")
  raisedFlags: [Flag!]! @derivedFrom(field: "flagger")
  receivedFlags: [Flag!]! @derivedFrom(field: "target")

  "All delegators who have delegated to this operator. Increased when Delegation is created and decreased when Delegation is removed"
  delegatorCount: Int!

  "DATA staked + held by the Operator contract = totalStakeInSponsorshipsWei + dataTokenBalanceWei. Last updated at valueUpdateBlockNumber/Timestamp."
  valueWithoutEarnings: BigInt!

  "DATA staked into Sponsorship contracts. Last updated at valueUpdateBlockNumber/Timestamp."
  totalStakeInSponsorshipsWei: BigInt!

  "DATA held by the operator, not yet staked. Last updated at valueUpdateBlockNumber/Timestamp, might be out of date if new DATA is sent via `ERC20.transfer`."
  dataTokenBalanceWei: BigInt!

  "Timestamp in seconds when valueWithoutEarnings was updated. Shows how much the valueWithoutEarnings might be out of date."
  valueUpdateTimestamp: BigInt!

  "Block number when valueWithoutEarnings was updated."
  valueUpdateBlockNumber: BigInt!

  "Total number of operator tokens in existence"
  operatorTokenTotalSupplyWei: BigInt!

  "DATA/operatortoken exchange rate, equal to valueWithoutEarnings / totalSupply. Operator tokens are worth (exchangeRate * amount) DATA when undelegating."
  exchangeRate: BigDecimal!

  "Connection metadata, to be able to find a node in the Operator's fleet"
  latestHeartbeatMetadata: String
  latestHeartbeatTimestamp: BigInt

  "Increase in the Operator's value (cumulative, after fees)"
  cumulativeProfitsWei: BigInt!

  "Operator's share of the earnings (cumulative)"
  cumulativeOperatorsCutWei: BigInt!

  "Operator earnings (cumulative) from all sponsorships. Includes the operator's share of earnings + delegators earnings"
  cumulativeEarningsWei: BigInt!

  metadataJsonString: String!
  owner: String!
  slashingsCount: Int!
  nodes: [String!]!
  operatorsCutFraction: BigInt!

  "Version is a bitfield of supported features. Generally, so far, higher version supports lower versions' features, so normal number comparison works."
  contractVersion: BigInt!

  isEligibleToVote: Boolean!
  protectionEndTimestamp: Int

  "Addresses that can call all owner/admin methods in the Operator contract (owner alone in this list initially)"
  controllers: [String!]!

  flagsOpened: [Flag!]! @derivedFrom(field: "flagger")
  flagsTargeted: [Flag!]! @derivedFrom(field: "target")
  votesOnFlags: [Vote!]! @derivedFrom(field: "voter")

  queueEntries: [QueueEntry!]! @derivedFrom(field: "operator")
}

type OperatorDailyBucket @entity {

  ## absolute values, set at bucket creation time, so they represent the state after the first event in bucket

  id: ID! # operator address + date
  operator: Operator!

  "The day of the bucket. This is a timestamp in seconds"
  date: BigInt!

  "DATA staked + held by the Operator contract = totalStakeInSponsorshipsWei + dataTokenBalanceWei (first event in bucket)"
  valueWithoutEarnings: BigInt!

  "DATA staked into Sponsorship contracts (first event in bucket)"
  totalStakeInSponsorshipsWei: BigInt!

  "DATA held by the operator, not yet staked (first event in bucket)"
  dataTokenBalanceWei: BigInt!

  "All delegators joining this operator. Initialized from operator.delegatorCount"
  delegatorCountAtStart: Int!


  ## accumulated values, updated when events are fired

  "Delegators that joined today. Updated when Delegation entity is created"
  delegatorCountChange: Int!

  "Sum of DATA tokens delegated to this operator today, by all delegators. Updated when Delegated event is fired"
  totalDelegatedWei: BigInt!

  "Sum of DATA tokens undelegated from this operator today, by all delegators. Updated when Undelegated event is fired"
  totalUndelegatedWei: BigInt!

  "Sum of earnings today, less operator's share"
  profitsWei: BigInt!

  "Sum of losses today"
  lossesWei: BigInt!

  "Sum of operator's share of earnings today"
  operatorsCutWei: BigInt!

  "Sum of the operator's lifetime earnings (including operator's cut)"
  cumulativeEarningsWei: BigInt!
}

# Delegation events in an Operator contract signals trust in the operator
type Delegation @entity {
  "0xoperatorAddress-0xdelegatorAddress"
  id: ID!
  operator: Operator!
  delegator: Delegator!

  "`true` if delegator == operator.owner"
  isSelfDelegation: Boolean!

  "Amount of internal Operator tokens this delegator holds"
  operatorTokenBalanceWei: BigInt!

  "Past value of DATA value of the Operator tokens this delegator holds, at latestDelegationTimestamp. Calculate current value by `operatorTokenBalanceWei * operator.exchangeRate`."
  _valueDataWei: BigInt!

  "latest delegation done by the delegator to this operator"
  latestDelegationTimestamp: Int!

  "earliest time this delegator can undelegate from this operator (0 if this.isSelfDelegation because it doesn't apply)"
  earliestUndelegationTimestamp: Int!
}

type Delegator @entity {
  id: ID! # delegator address
  delegations: [Delegation!]! @derivedFrom(field: "delegator")
  queueEntries: [QueueEntry!]! @derivedFrom(field: "delegator")
  numberOfDelegations: Int!
  totalValueDataWei: BigInt!
  cumulativeEarningsWei: BigInt!
}

type DelegatorDailyBucket @entity {
  id: ID! # delegator address + date
  delegator: Delegator!
  date: BigInt!
  totalValueDataWei: BigInt!
  operatorCount: Int!
  cumulativeEarningsWei: BigInt!
}

# Sponsorship contracts hold tokens sent by sponsors and distribute them to the Operators who hold Stake in the contract
type Sponsorship @entity {

  ## Sponsorship properties: not changeable

  "id = sponsorship address"
  id: ID!

  "sponsored stream"
  stream: Stream

  "connection metadata"
  metadata: String

  "who deployed the Sponsorship contract"
  creator: String!

  "how much is split between staked operators per second, weighted by their stake"
  totalPayoutWeiPerSec: BigInt!

  "how long you have to stay staked, or else you get slashed when you forceUnstake"
  minimumStakingPeriodSeconds: BigInt!

  "how many stakers are accepted (if MaxOperatorsJoinPolicy is used)"
  maxOperators: Int

  "how many stakers are required so that Sponsorship isRunning(), i.e. starts paying"
  minOperators: Int


  ## Sponsorship state: live / updated after relevant transactions

  "how many operators are staked right now"
  operatorCount: Int!

  "are there enough operators? Is this sponsorship paying?"
  isRunning: Boolean!

  "how much stake in total is sharing on the sponsorship revenue"
  totalStakedWei: BigInt!

  "who has staked how much"
  stakes: [Stake!]! @derivedFrom(field: "sponsorship")

  "how much DATA has entered or travelled through this contract"
  cumulativeSponsoring: BigInt!

  "how much DATA is there still in this contract"
  remainingWei: BigInt!

  "timestamp when remainingWei was last updated"
  remainingWeiUpdateTimestamp: BigInt

  "when will the contract run out of DATA if more is not added"
  projectedInsolvency: BigInt

  "how much 'ROI' you could make by staking, extrapolated from current payments"
  spotAPY: BigDecimal!

  "what the operators think about each other: 'flag' means an operator proposes another operator be kicked out"
  flags: [Flag!]! @derivedFrom(field: "sponsorship")


  ## plain event lists

  slashingEvents: [SlashingEvent!]! @derivedFrom(field: "sponsorship")
  stakingEvents: [StakingEvent!]! @derivedFrom(field: "sponsorship")
  sponsoringEvents: [SponsoringEvent!]! @derivedFrom(field: "sponsorship")
}

type SponsorshipDailyBucket @entity {
  id: ID! # 0xSponsorshipAddress-TIMESTAMP
  sponsorship: Sponsorship!
  date: BigInt!
  totalStakedWei: BigInt!
  remainingWei: BigInt!
  projectedInsolvency: BigInt
  spotAPY: BigDecimal!
  operatorCount: Int!
}

# Operators hold Stake in Sponsorships. Stake is the "many-to-many table" between Sponsorship and Operator
type Stake @entity {
  id: ID! # 0xSponsorshipAddress-0xOperatorAddress
  sponsorship: Sponsorship!
  operator: Operator!
  amountWei: BigInt!
  lockedWei: BigInt!
  minimumStakeWei: BigInt! # individual minimum stake can be different from global one if operator got flagged or opened lots of flags
  earningsWei: BigInt! # momentary earnings at updateTimestamp
  updateTimestamp: Int! # timestamp when earningsWei (and others) were updated; useful for calculating "real-time" earnings values
  joinTimestamp: Int!
}

# Operators may raise Flags on each other to kick out those who don't do work
type Flag @entity {
  id: ID! # 0xsponsorshipAddress-0xtargetOperatorAddress-flagIndex (derived using lastFlagIndex)
  lastFlagIndex: Int! # there can be many flags for same Operator in same Sponsorship, but only one at a time. First flag stores the last flag's index.
  sponsorship: Sponsorship!
  target: Operator!
  flagger: Operator!
  flaggingTimestamp: Int!
  result: String! # "waiting", "voting", "kicked", or "failed"
  flagResolutionTimestamp: Int! # the flag was resolved, either by "kicked" or "failed"
  votesForKick: BigInt!
  votesAgainstKick: BigInt!
  votes: [Vote!]! @derivedFrom(field: "flag")
  reviewerCount: Int!
  targetStakeAtRiskWei: BigInt!
  metadata: String!
  voteStartTimestamp: Int!
  voteEndTimestamp: Int!
  protectionEndTimestamp: Int!
  reviewers: [Operator!]!
}

type Vote @entity {
  id: ID! # 0xSponsorshipAddress-0xTargetOperatorAddress-flagIndex-0xReviewerAddress
  flag: Flag!
  voter: Operator!
  voterWeight: BigInt!
  timestamp: Int!
  votedKick: Boolean!
}

# Undelegation queue: when a delegator wants their DATA back, they are put in the queue to receive their tokens when they arrive
type QueueEntry @entity {
  id: ID! # 0xSponsorshipAddress-QueueIndex
  operator: Operator!
  amount: BigInt!
  date: BigInt!
  delegator: Delegator!
}

# Plain events, saved "as-is". TODO: do we need and want them? Will they be expensive in the new decentralized subgraph?

type SponsoringEvent @entity {
  id: ID!
  sponsor: String!
  amount: BigInt!
  sponsorship: Sponsorship!
  date: BigInt!
}

type SlashingEvent @entity {
  id: ID!
  operator: Operator!
  amount: BigInt!
  date: BigInt!
  sponsorship: Sponsorship!
}

type StakingEvent @entity {
  id: ID!
  operator: Operator!
  amount: BigInt!
  date: BigInt!
  sponsorship: Sponsorship!
}