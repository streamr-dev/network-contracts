# if you recreate the docker image to autodeploy in the dev env this file is used directly
# if you deploy locally use the npm task or scripts/generateYaml.sh to re-generate/update this file

specVersion: 0.0.4
description: Subgraph definitions for the stream permission registry
repository:
schema:
  file: ./schema.graphql
features:
  - fullTextSearch
dataSources:
  - kind: ethereum/contract
    name: StreamRegistry
    network: xDai
    source:
      address: "0x6cCdd5d866ea766f6DF5965aA98DeCCD629ff222"
      abi: StreamRegistry
      # startBlock: 10000000 #TODO
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Stream
      abis:
        - name: StreamRegistry
          file: ./abis/StreamRegistry.json
      eventHandlers:
        - event: StreamCreated(string,string)
          handler: handleStreamCreation
        - event: StreamDeleted(string)
          handler: handleStreamDeletion
        - event: StreamUpdated(string,string)
          handler: handleStreamUpdate
        - event: PermissionUpdated(string,address,bool,bool,uint256,uint256,bool)
          handler: handlePermissionUpdate
      file: ./src/streamRegistry.ts
  - kind: ethereum/contract
    name: NodeRegistry
    network: xDai
    source:
      address: "0x231b810D98702782963472e1D60a25496999E75D"
      abi: NodeRegistry
      # startBlock: 10000000 #TODO
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Node
      abis:
        - name: NodeRegistry
          file: ./abis/NodeRegistry.json
      eventHandlers:
        - event: NodeUpdated(indexed address,string,indexed uint256,uint256)
          handler: handleNodeUpdate
        - event: NodeRemoved(indexed address)
          handler: handleNodeRemoved
        # - event: NodeWhitelistApproved(indexed address)
        #   handler: handleNodeWhitelisted
        # - event: NodeWhitelistRejected(indexed address)
        #   handler: handleNodeUnWhitelisted
      file: ./src/nodeRegistry.ts
  - kind: ethereum/contract
    name: StreamStorageRegistry
    network: xDai
    source:
      address: "0xd04af489677001444280366Dd0885B03dAaDe71D"
      abi: StreamStorageRegistry
      # startBlock: 10000000 #TODO
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Node
        # - Stream
      abis:
        - name: StreamStorageRegistry
          file: ./abis/StreamStorageRegistry.json
      eventHandlers:
        - event: Added(string,indexed address)
          handler: handleStorageNodeAddedToStream
        - event: Removed(string,indexed address)
          handler: handleStorageNodeRemovedFromStream
      file: ./src/streamStorageRegistry.ts
  - kind: ethereum/contract
    name: ProjectRegistryV1
    network: xDai # xDai means dev1
    source:
      address: "0x3C841B9Aa08166e9B864972930703e878d25804B"
      abi: ProjectRegistryV1
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Project
      abis:
        - name: ProjectRegistryV1
          file: ./abis/ProjectRegistryV1.json
      eventHandlers:
        - event: ProjectCreated(indexed bytes32,uint32[],(address,address,uint256)[],string[],uint256,string)
          handler: handleProjectCreation
        - event: ProjectDeleted(indexed bytes32)
          handler: handleProjectDeletion
        - event: ProjectUpdated(indexed bytes32,uint32[],(address,address,uint256)[],string[],uint256,string)
          handler: handleProjectUpdate
        - event: PaymentDetailsByChainUpdated(indexed bytes32,uint32,address,address,uint256)
          handler: handlePaymentDetailsByChainUpdate
        - event: StreamAdded(bytes32,string)
          handler: handleStreamAddition
        - event: StreamRemoved(bytes32,string)
          handler: handleStreamRemoval
        - event: PermissionUpdated(bytes32,address,bool,bool,bool,bool)
          handler: handlePermissionUpdate
        - event: Subscribed(indexed bytes32,indexed address,uint256)
          handler: handleSubscriptionUpdate
      file: ./src/projectRegistry.ts
  - kind: ethereum/contract
    name: MarketplaceV4
    network: xDai
    source:
      address: "0xB9372284e0D61607aF3B7EF5f022e7D599Ed2a37"
      abi: MarketplaceV4
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - ProjectPurchase
      abis:
        - name: MarketplaceV4
          file: ./abis/MarketplaceV4.json
      eventHandlers:
        - event: ProjectPurchased(bytes32,address,uint256,uint256,uint256)
          handler: handleProjectPurchase
      file: ./src/marketplaceV4.ts
  - kind: ethereum/contract
    name: ProjectStakingV1
    network: xDai
    source:
      address: "0xBFCF120a8fD17670536f1B27D9737B775b2FD4CF"
      abi: ProjectStakingV1
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Stake
        - Unstake
      abis:
        - name: ProjectStakingV1
          file: ./abis/ProjectStakingV1.json
      eventHandlers:
        - event: Stake(indexed bytes32,indexed address,uint256)
          handler: handleStake
        - event: Unstake(indexed bytes32,indexed address,uint256)
          handler: handleUnstake
      file: ./src/projectStaking.ts
  - kind: ethereum/contract
    name: BountyFactory
    network: xDai
    source:
      # make sure this is same as config.contracts.BountyFactory in https://github.com/streamr-dev/network-contracts/blob/develop/packages/config/src/networks.json
      address: '0xef927F18D2ac3862c6ABCAa953203A4DbF7f519e'
      abi: BountyFactory
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/bountyFactory.ts
      entities:
        - Bounty
      abis:
        - name: BountyFactory
          file: ./abis/BountyFactory.json
      eventHandlers:
        - event: NewBounty(address, string, string)
          handler: handleBountyCreated
  - kind: ethereum/contract
    name: BrokerPoolFactory
    network: xDai
    source:
      # make sure this is same as config.contracts.BountyFactory in https://github.com/streamr-dev/network-contracts/blob/develop/packages/config/src/networks.json
      address: '0x908d035020EED80035487146fB320eF0f11a3180'
      abi: BrokerPoolFactory
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/poolFactory.ts
      entities:
        - Pool
        - PoolDelegation
      abis:
        - name: BrokerPoolFactory
          file: ./abis/BrokerPoolFactory.json
      eventHandlers:
        - event: NewBrokerPool(address)
          handler: handlePoolCreated

templates:
  - name: Bounty
    kind: ethereum/contract
    network: xDai
    source:
      abi: Bounty
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/bounty.ts
      entities:
        - Bounty
        - BountyStake
        - BrokerPool
        - Flag
      abis:
        - name: Bounty
          file: ./abis/Bounty.json
      eventHandlers:
          - event: StakeUpdate(indexed address,uint256,uint256)
            handler: handleStakeUpdated
          - event: BountyUpdate(uint256,uint256,uint256,uint32,bool)
            handler: handleBountyUpdated
          - event: FlagUpdate(indexed address,address,uint256,uint256)
            handler: handleFlagUpdate

        # - event: StakeAdded(indexed address,uint256,uint256)
        #   handler: handleStakeAdded
        # - event: SponsorshipReceived(indexed address,uint256)
        #   handler: handleSponsorshipReceived
        # - event: BrokerJoined(indexed address)
        #   handler: handleBrokerJoined
        # - event: BrokerLeft(indexed address,uint256)
        #   handler: handleBrokerLeft
  - name: BrokerPool
    kind: ethereum/contract
    network: xDai
    source:
      abi: BrokerPool
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/pool.ts
      entities:
        - BrokerPool
        - PoolDelegation
      abis:
        - name: BrokerPool
          file: ./abis/BrokerPool.json
      eventHandlers:
          - event: Delegated(indexed address,uint256)
            handler: handleDelegationReceived