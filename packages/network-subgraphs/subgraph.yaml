# if you recreate the docker image to autodeploy in the dev env this file is used directly
# if you deploy locally use the npm task or scripts/generateYaml.sh to re-generate/update this file

specVersion: 0.0.4
description: Subgraph definitions for the stream permission registry
repository:
schema:
  file: ./schema.graphql
features:
  - fullTextSearch
dataSources:
  - kind: ethereum/contract
    name: StreamRegistry
    network: xDai
    source:
      address: "0xd04af489677001444280366Dd0885B03dAaDe71D"
      abi: StreamRegistry
      # startBlock: 10000000 #TODO
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Stream
      abis:
        - name: StreamRegistry
          file: ./abis/StreamRegistry.json
      eventHandlers:
        - event: StreamCreated(string,string)
          handler: handleStreamCreation
        - event: StreamDeleted(string)
          handler: handleStreamDeletion
        - event: StreamUpdated(string,string)
          handler: handleStreamUpdate
        - event: PermissionUpdated(string,address,bool,bool,uint256,uint256,bool)
          handler: handlePermissionUpdate
      file: ./src/streamRegistry.ts
  - kind: ethereum/contract
    name: NodeRegistry
    network: xDai
    source:
      address: "0xCBAcfA0592B3D809aEc805d527f8ceAe9307D9C0"
      abi: NodeRegistry
      # startBlock: 10000000 #TODO
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Node
      abis:
        - name: NodeRegistry
          file: ./abis/NodeRegistry.json
      eventHandlers:
        - event: NodeUpdated(indexed address,string,indexed uint256,uint256)
          handler: handleNodeUpdate
        - event: NodeRemoved(indexed address)
          handler: handleNodeRemoved
        # - event: NodeWhitelistApproved(indexed address)
        #   handler: handleNodeWhitelisted
        # - event: NodeWhitelistRejected(indexed address)
        #   handler: handleNodeUnWhitelisted
      file: ./src/nodeRegistry.ts
  - kind: ethereum/contract
    name: StreamStorageRegistry
    network: xDai
    source:
      address: "0xB9372284e0D61607aF3B7EF5f022e7D599Ed2a37"
      abi: StreamStorageRegistry
      # startBlock: 10000000 #TODO
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Node
        # - Stream
      abis:
        - name: StreamStorageRegistry
          file: ./abis/StreamStorageRegistry.json
      eventHandlers:
        - event: Added(string,indexed address)
          handler: handleStorageNodeAddedToStream
        - event: Removed(string,indexed address)
          handler: handleStorageNodeRemovedFromStream
      file: ./src/streamStorageRegistry.ts
  - kind: ethereum/contract
    name: ProjectRegistryV1
    network: xDai # xDai means dev1
    source:
      address: "0x4D563c20DB87a4EC4989607cD0Fdf4C95eD14d13"
      abi: ProjectRegistryV1
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Project
      abis:
        - name: ProjectRegistryV1
          file: ./abis/ProjectRegistryV1.json
      eventHandlers:
        - event: ProjectCreated(indexed bytes32,uint32[],(address,address,uint256)[],string[],uint256,string)
          handler: handleProjectCreation
        - event: ProjectDeleted(indexed bytes32)
          handler: handleProjectDeletion
        - event: ProjectUpdated(indexed bytes32,uint32[],(address,address,uint256)[],string[],uint256,string)
          handler: handleProjectUpdate
        - event: PaymentDetailsByChainUpdated(indexed bytes32,uint32,address,address,uint256)
          handler: handlePaymentDetailsByChainUpdate
        - event: StreamAdded(bytes32,string)
          handler: handleStreamAddition
        - event: StreamRemoved(bytes32,string)
          handler: handleStreamRemoval
        - event: PermissionUpdated(bytes32,address,bool,bool,bool,bool)
          handler: handlePermissionUpdate
        - event: Subscribed(indexed bytes32,indexed address,uint256)
          handler: handleSubscriptionUpdate
      file: ./src/projectRegistry.ts
  - kind: ethereum/contract
    name: MarketplaceV4
    network: xDai
    source:
      address: "0x05784c543C5155979f82Ece2FbB4cE356181D30e"
      abi: MarketplaceV4
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - ProjectPurchase
      abis:
        - name: MarketplaceV4
          file: ./abis/MarketplaceV4.json
      eventHandlers:
        - event: ProjectPurchased(bytes32,address,uint256,uint256,uint256)
          handler: handleProjectPurchase
      file: ./src/marketplaceV4.ts
  - kind: ethereum/contract
    name: ProjectStakingV1
    network: xDai
    source:
      address: "0xd73437154Ef05167a083ed8Fe839db4fB076A1A3"
      abi: ProjectStakingV1
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      entities:
        - Stake
        - Unstake
      abis:
        - name: ProjectStakingV1
          file: ./abis/ProjectStakingV1.json
      eventHandlers:
        - event: Stake(indexed bytes32,indexed address,uint256,uint256)
          handler: handleStake
        - event: Unstake(indexed bytes32,indexed address,uint256,uint256)
          handler: handleUnstake
      file: ./src/projectStaking.ts
  - kind: ethereum/contract
    name: SponsorshipFactory
    network: xDai
    source:
      # make sure this is same as config.contracts.SponsorshipFactory in https://github.com/streamr-dev/network-contracts/blob/develop/packages/config/src/networks.json
      address: '0x75Cb7CA52637991A3f166B8546542B3F6D712fd4'
      abi: SponsorshipFactory
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/sponsorshipFactory.ts
      entities:
        - Sponsorship
      abis:
        - name: SponsorshipFactory
          file: ./abis/SponsorshipFactory.json
      eventHandlers:
        - event: NewSponsorship(indexed address,indexed string,string,address[],uint256[],indexed address)
          handler: handleNewSponsorship
  - kind: ethereum/contract
    name: OperatorFactory
    network: xDai
    source:
      # make sure this is same as config.contracts.OperatorFactory in https://github.com/streamr-dev/network-contracts/blob/develop/packages/config/src/networks.json
      address: '0x0bADa0acE1d16ABf1ce1aAED9Bc7Ce231ECc35b5'
      abi: OperatorFactory
      startBlock: 0
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/operatorFactory.ts
      entities:
        - Operator
        - Delegation
      abis:
        - name: OperatorFactory
          file: ./abis/OperatorFactory.json
      eventHandlers:
        - event: NewOperator(indexed address,indexed address)
          handler: handleNewOperator

templates:
  - name: Sponsorship
    kind: ethereum/contract
    network: xDai
    source:
      abi: Sponsorship
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/sponsorship.ts
      entities:
        - Sponsorship
        - Stake
        - StakeEvent
        - SlashingEvent
        - Flag
      abis:
        - name: Sponsorship
          file: ./abis/Sponsorship.json
      eventHandlers:
          - event: StakeUpdate(indexed address,uint256,uint256,uint256)
            handler: handleStakeUpdated
          - event: SponsorshipUpdate(uint256,uint256,indexed uint256,indexed bool)
            handler: handleSponsorshipUpdated
          - event: Flagged(indexed address,indexed address,uint256,indexed uint256,string)
            handler: handleFlagged
          - event: FlagUpdate(indexed address,indexed uint8,uint256,uint256,indexed address,int256)
            handler: handleFlagUpdate
          - event: ProjectedInsolvencyUpdate(uint256)
            handler: handleProjectedInsolvencyUpdate
          - event: OperatorSlashed(indexed address,uint256)
            handler: handleOperatorSlashed

        # - event: StakeAdded(indexed address,uint256,uint256)
        #   handler: handleStakeAdded
          - event: SponsorshipReceived(indexed address,uint256)
            handler: handleSponsorshipReceived
        # - event: OperatorJoined(indexed address)
        #   handler: handleOperatorJoined
        # - event: OperatorLeft(indexed address,uint256)
        #   handler: handleOperatorLeft
  - name: Operator
    kind: ethereum/contract
    network: xDai
    source:
      abi: Operator
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/operator.ts
      entities:
        - Operator
        - QueueEntry
        - Delegation
        - OperatorDailyBucket
      abis:
        - name: Operator
          file: ./abis/Operator.json
      eventHandlers:
          - event: BalanceUpdate(indexed address,uint256,uint256,uint256)
            handler: handleBalanceUpdate
          # Stake entity is kept up to date by sponsorship.ts via Sponsorship.StakeUpdate
          # - event: StakeUpdate(indexed address,uint256)
          #   handler: handleStakeUpdated
          - event: OperatorValueUpdate(uint256,uint256)
            handler: handleOperatorValueUpdate
          - event: Profit(uint256,indexed uint256,indexed uint256)
            handler: handleProfit
          - event: Loss(uint256)
            handler: handleLoss
          - event: QueuedDataPayout(indexed address,uint256,uint256)
            handler: handleQueuedDataPayout
          - event: QueueUpdated(indexed address,uint256,uint256)
            handler: handleQueueUpdated
          - event: NodesSet(address[])
            handler: handleNodesSet
          - event: Heartbeat(indexed address,string)
            handler: handleHeartbeat
          - event: MetadataUpdated(string,indexed address,indexed uint256)
            handler: handleMetadataUpdate
